
F07DISC-SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800609c  0800609c  0000709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  00008024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08006564  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008024  2**0
                  CONTENTS
 10 .bss          0000232c  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002350  20002350  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a488  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002084  00000000  00000000  000124dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  00014560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b0  00000000  00000000  00014fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ab3  00000000  00000000  00015758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4d5  00000000  00000000  0003720b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c374d  00000000  00000000  000466e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109e2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000285c  00000000  00000000  00109e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006084 	.word	0x08006084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08006084 	.word	0x08006084

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2102      	movs	r1, #2
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <SELECT+0x18>)
 80004fe:	f001 fa4b 	bl	8001998 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f000 ff86 	bl	8001414 <HAL_Delay>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020800 	.word	0x40020800

08000510 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	4803      	ldr	r0, [pc, #12]	@ (8000528 <DESELECT+0x18>)
 800051a:	f001 fa3d 	bl	8001998 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f000 ff78 	bl	8001414 <HAL_Delay>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40020800 	.word	0x40020800

0800052c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000536:	bf00      	nop
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <SPI_TxByte+0x30>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b02      	cmp	r3, #2
 8000544:	d1f8      	bne.n	8000538 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	2364      	movs	r3, #100	@ 0x64
 800054a:	2201      	movs	r2, #1
 800054c:	4803      	ldr	r0, [pc, #12]	@ (800055c <SPI_TxByte+0x30>)
 800054e:	f001 ff2a 	bl	80023a6 <HAL_SPI_Transmit>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000050 	.word	0x20000050

08000560 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800056c:	bf00      	nop
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <SPI_TxBuffer+0x30>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	2b02      	cmp	r3, #2
 800057a:	d1f8      	bne.n	800056e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800057c:	887a      	ldrh	r2, [r7, #2]
 800057e:	2364      	movs	r3, #100	@ 0x64
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <SPI_TxBuffer+0x30>)
 8000584:	f001 ff0f 	bl	80023a6 <HAL_SPI_Transmit>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000050 	.word	0x20000050

08000594 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800059a:	23ff      	movs	r3, #255	@ 0xff
 800059c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800059e:	bf00      	nop
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <SPI_RxByte+0x34>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d1f8      	bne.n	80005a0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005ae:	1dba      	adds	r2, r7, #6
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	2364      	movs	r3, #100	@ 0x64
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <SPI_RxByte+0x34>)
 80005ba:	f002 f838 	bl	800262e <HAL_SPI_TransmitReceive>

	return data;
 80005be:	79bb      	ldrb	r3, [r7, #6]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000050 	.word	0x20000050

080005cc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005d4:	f7ff ffde 	bl	8000594 <SPI_RxByte>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	701a      	strb	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <SD_ReadyWait+0x30>)
 80005f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005f4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005f6:	f7ff ffcd 	bl	8000594 <SPI_RxByte>
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2bff      	cmp	r3, #255	@ 0xff
 8000602:	d003      	beq.n	800060c <SD_ReadyWait+0x24>
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <SD_ReadyWait+0x30>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1f4      	bne.n	80005f6 <SD_ReadyWait+0xe>

	return res;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000042 	.word	0x20000042

0800061c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000622:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000626:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000628:	f7ff ff72 	bl	8000510 <DESELECT>
	for(int i = 0; i < 10; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	e005      	b.n	800063e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000632:	20ff      	movs	r0, #255	@ 0xff
 8000634:	f7ff ff7a 	bl	800052c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3301      	adds	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b09      	cmp	r3, #9
 8000642:	ddf6      	ble.n	8000632 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000644:	f7ff ff56 	bl	80004f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000648:	2340      	movs	r3, #64	@ 0x40
 800064a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800065c:	2395      	movs	r3, #149	@ 0x95
 800065e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000660:	463b      	mov	r3, r7
 8000662:	2106      	movs	r1, #6
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff7b 	bl	8000560 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800066a:	e002      	b.n	8000672 <SD_PowerOn+0x56>
	{
		cnt--;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3b01      	subs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000672:	f7ff ff8f 	bl	8000594 <SPI_RxByte>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d002      	beq.n	8000682 <SD_PowerOn+0x66>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f4      	bne.n	800066c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000682:	f7ff ff45 	bl	8000510 <DESELECT>
	SPI_TxByte(0XFF);
 8000686:	20ff      	movs	r0, #255	@ 0xff
 8000688:	f7ff ff50 	bl	800052c <SPI_TxByte>

	PowerFlag = 1;
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <SD_PowerOn+0x80>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000045 	.word	0x20000045

080006a0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <SD_PowerOff+0x14>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000045 	.word	0x20000045

080006b8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <SD_CheckPower+0x14>)
 80006be:	781b      	ldrb	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000045 	.word	0x20000045

080006d0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <SD_RxDataBlock+0x58>)
 80006dc:	22c8      	movs	r2, #200	@ 0xc8
 80006de:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006e0:	f7ff ff58 	bl	8000594 <SPI_RxByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2bff      	cmp	r3, #255	@ 0xff
 80006ec:	d103      	bne.n	80006f6 <SD_RxDataBlock+0x26>
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <SD_RxDataBlock+0x58>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80006fa:	d001      	beq.n	8000700 <SD_RxDataBlock+0x30>
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00f      	b.n	8000720 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff60 	bl	80005cc <SPI_RxBytePtr>
	} while(len--);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	603a      	str	r2, [r7, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f4      	bne.n	8000700 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000716:	f7ff ff3d 	bl	8000594 <SPI_RxByte>
	SPI_RxByte();
 800071a:	f7ff ff3b 	bl	8000594 <SPI_RxByte>

	return TRUE;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000040 	.word	0x20000040

0800072c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800073c:	f7ff ff54 	bl	80005e8 <SD_ReadyWait>
 8000740:	4603      	mov	r3, r0
 8000742:	2bff      	cmp	r3, #255	@ 0xff
 8000744:	d001      	beq.n	800074a <SD_TxDataBlock+0x1e>
 8000746:	2300      	movs	r3, #0
 8000748:	e02f      	b.n	80007aa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feed 	bl	800052c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	2bfd      	cmp	r3, #253	@ 0xfd
 8000756:	d020      	beq.n	800079a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000758:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff feff 	bl	8000560 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000762:	f7ff ff17 	bl	8000594 <SPI_RxByte>
		SPI_RxByte();
 8000766:	f7ff ff15 	bl	8000594 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800076a:	e00b      	b.n	8000784 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800076c:	f7ff ff12 	bl	8000594 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	2b05      	cmp	r3, #5
 800077c:	d006      	beq.n	800078c <SD_TxDataBlock+0x60>
			i++;
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	3301      	adds	r3, #1
 8000782:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	2b40      	cmp	r3, #64	@ 0x40
 8000788:	d9f0      	bls.n	800076c <SD_TxDataBlock+0x40>
 800078a:	e000      	b.n	800078e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800078c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800078e:	bf00      	nop
 8000790:	f7ff ff00 	bl	8000594 <SPI_RxByte>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0fa      	beq.n	8000790 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d101      	bne.n	80007a8 <SD_TxDataBlock+0x7c>
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <SD_TxDataBlock+0x7e>

	return FALSE;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	6039      	str	r1, [r7, #0]
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007be:	f7ff ff13 	bl	80005e8 <SD_ReadyWait>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2bff      	cmp	r3, #255	@ 0xff
 80007c6:	d001      	beq.n	80007cc <SD_SendCmd+0x1a>
 80007c8:	23ff      	movs	r3, #255	@ 0xff
 80007ca:	e042      	b.n	8000852 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff feac 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0e1b      	lsrs	r3, r3, #24
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fea6 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	0c1b      	lsrs	r3, r3, #16
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fea0 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe9a 	bl	800052c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe95 	bl	800052c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b40      	cmp	r3, #64	@ 0x40
 8000806:	d102      	bne.n	800080e <SD_SendCmd+0x5c>
 8000808:	2395      	movs	r3, #149	@ 0x95
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e007      	b.n	800081e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b48      	cmp	r3, #72	@ 0x48
 8000812:	d102      	bne.n	800081a <SD_SendCmd+0x68>
 8000814:	2387      	movs	r3, #135	@ 0x87
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e001      	b.n	800081e <SD_SendCmd+0x6c>
	else crc = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe83 	bl	800052c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b4c      	cmp	r3, #76	@ 0x4c
 800082a:	d101      	bne.n	8000830 <SD_SendCmd+0x7e>
 800082c:	f7ff feb2 	bl	8000594 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000830:	230a      	movs	r3, #10
 8000832:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000834:	f7ff feae 	bl	8000594 <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800083c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000840:	2b00      	cmp	r3, #0
 8000842:	da05      	bge.n	8000850 <SD_SendCmd+0x9e>
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	3b01      	subs	r3, #1
 8000848:	73bb      	strb	r3, [r7, #14]
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f1      	bne.n	8000834 <SD_SendCmd+0x82>

	return res;
 8000850:	7b7b      	ldrb	r3, [r7, #13]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SD_disk_initialize+0x14>
 800086c:	2301      	movs	r3, #1
 800086e:	e0d1      	b.n	8000a14 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000870:	4b6a      	ldr	r3, [pc, #424]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <SD_disk_initialize+0x2a>
 800087e:	4b67      	ldr	r3, [pc, #412]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	e0c6      	b.n	8000a14 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000886:	f7ff fec9 	bl	800061c <SD_PowerOn>

	/* slave select */
	SELECT();
 800088a:	f7ff fe33 	bl	80004f4 <SELECT>

	/* check disk type */
	type = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000892:	2100      	movs	r1, #0
 8000894:	2040      	movs	r0, #64	@ 0x40
 8000896:	f7ff ff8c 	bl	80007b2 <SD_SendCmd>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	f040 80a1 	bne.w	80009e4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 80008a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008aa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008ae:	2048      	movs	r0, #72	@ 0x48
 80008b0:	f7ff ff7f 	bl	80007b2 <SD_SendCmd>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d155      	bne.n	8000966 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	e00c      	b.n	80008da <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008c0:	7bfc      	ldrb	r4, [r7, #15]
 80008c2:	f7ff fe67 	bl	8000594 <SPI_RxByte>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	f104 0310 	add.w	r3, r4, #16
 80008ce:	443b      	add	r3, r7
 80008d0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d9ef      	bls.n	80008c0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008e0:	7abb      	ldrb	r3, [r7, #10]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d17e      	bne.n	80009e4 <SD_disk_initialize+0x188>
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	2baa      	cmp	r3, #170	@ 0xaa
 80008ea:	d17b      	bne.n	80009e4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008ec:	2100      	movs	r1, #0
 80008ee:	2077      	movs	r0, #119	@ 0x77
 80008f0:	f7ff ff5f 	bl	80007b2 <SD_SendCmd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d807      	bhi.n	800090a <SD_disk_initialize+0xae>
 80008fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008fe:	2069      	movs	r0, #105	@ 0x69
 8000900:	f7ff ff57 	bl	80007b2 <SD_SendCmd>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800090a:	4b45      	ldr	r3, [pc, #276]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1ec      	bne.n	80008ec <SD_disk_initialize+0x90>
 8000912:	e000      	b.n	8000916 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000914:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000916:	4b42      	ldr	r3, [pc, #264]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d062      	beq.n	80009e4 <SD_disk_initialize+0x188>
 800091e:	2100      	movs	r1, #0
 8000920:	207a      	movs	r0, #122	@ 0x7a
 8000922:	f7ff ff46 	bl	80007b2 <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e00c      	b.n	800094c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000932:	7bfc      	ldrb	r4, [r7, #15]
 8000934:	f7ff fe2e 	bl	8000594 <SPI_RxByte>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	f104 0310 	add.w	r3, r4, #16
 8000940:	443b      	add	r3, r7
 8000942:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	3301      	adds	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d9ef      	bls.n	8000932 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000952:	7a3b      	ldrb	r3, [r7, #8]
 8000954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x104>
 800095c:	230c      	movs	r3, #12
 800095e:	e000      	b.n	8000962 <SD_disk_initialize+0x106>
 8000960:	2304      	movs	r3, #4
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	e03e      	b.n	80009e4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000966:	2100      	movs	r1, #0
 8000968:	2077      	movs	r0, #119	@ 0x77
 800096a:	f7ff ff22 	bl	80007b2 <SD_SendCmd>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d808      	bhi.n	8000986 <SD_disk_initialize+0x12a>
 8000974:	2100      	movs	r1, #0
 8000976:	2069      	movs	r0, #105	@ 0x69
 8000978:	f7ff ff1b 	bl	80007b2 <SD_SendCmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d801      	bhi.n	8000986 <SD_disk_initialize+0x12a>
 8000982:	2302      	movs	r3, #2
 8000984:	e000      	b.n	8000988 <SD_disk_initialize+0x12c>
 8000986:	2301      	movs	r3, #1
 8000988:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d10e      	bne.n	80009ae <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000990:	2100      	movs	r1, #0
 8000992:	2077      	movs	r0, #119	@ 0x77
 8000994:	f7ff ff0d 	bl	80007b2 <SD_SendCmd>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d80e      	bhi.n	80009bc <SD_disk_initialize+0x160>
 800099e:	2100      	movs	r1, #0
 80009a0:	2069      	movs	r0, #105	@ 0x69
 80009a2:	f7ff ff06 	bl	80007b2 <SD_SendCmd>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <SD_disk_initialize+0x160>
 80009ac:	e00c      	b.n	80009c8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ae:	2100      	movs	r1, #0
 80009b0:	2041      	movs	r0, #65	@ 0x41
 80009b2:	f7ff fefe 	bl	80007b2 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1e2      	bne.n	800098a <SD_disk_initialize+0x12e>
 80009c4:	e000      	b.n	80009c8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009c6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <SD_disk_initialize+0x1c4>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <SD_disk_initialize+0x184>
 80009d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d4:	2050      	movs	r0, #80	@ 0x50
 80009d6:	f7ff feec 	bl	80007b2 <SD_SendCmd>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SD_disk_initialize+0x188>
 80009e0:	2300      	movs	r3, #0
 80009e2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <SD_disk_initialize+0x1c8>)
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ea:	f7ff fd91 	bl	8000510 <DESELECT>
	SPI_RxByte();
 80009ee:	f7ff fdd1 	bl	8000594 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d008      	beq.n	8000a0a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e001      	b.n	8000a0e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a0a:	f7ff fe49 	bl	80006a0 <SD_PowerOff>
	}

	return Stat;
 8000a0e:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <SD_disk_initialize+0x1c0>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000040 	.word	0x20000040
 8000a24:	20000044 	.word	0x20000044

08000a28 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SD_disk_status+0x14>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e002      	b.n	8000a42 <SD_disk_status+0x1a>
	return Stat;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <SD_disk_status+0x28>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000

08000a54 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <SD_disk_read+0x1c>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <SD_disk_read+0x20>
 8000a70:	2304      	movs	r3, #4
 8000a72:	e051      	b.n	8000b18 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <SD_disk_read+0xcc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SD_disk_read+0x32>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e048      	b.n	8000b18 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <SD_disk_read+0xd0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <SD_disk_read+0x44>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a98:	f7ff fd2c 	bl	80004f4 <SELECT>

	if (count == 1)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d111      	bne.n	8000ac6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2051      	movs	r0, #81	@ 0x51
 8000aa6:	f7ff fe84 	bl	80007b2 <SD_SendCmd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d129      	bne.n	8000b04 <SD_disk_read+0xb0>
 8000ab0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab4:	68b8      	ldr	r0, [r7, #8]
 8000ab6:	f7ff fe0b 	bl	80006d0 <SD_RxDataBlock>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d021      	beq.n	8000b04 <SD_disk_read+0xb0>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	e01e      	b.n	8000b04 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	2052      	movs	r0, #82	@ 0x52
 8000aca:	f7ff fe72 	bl	80007b2 <SD_SendCmd>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d117      	bne.n	8000b04 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f7ff fdf9 	bl	80006d0 <SD_RxDataBlock>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00a      	beq.n	8000afa <SD_disk_read+0xa6>
				buff += 512;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000aea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1ed      	bne.n	8000ad4 <SD_disk_read+0x80>
 8000af8:	e000      	b.n	8000afc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000afa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	204c      	movs	r0, #76	@ 0x4c
 8000b00:	f7ff fe57 	bl	80007b2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b04:	f7ff fd04 	bl	8000510 <DESELECT>
	SPI_RxByte();
 8000b08:	f7ff fd44 	bl	8000594 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000044 	.word	0x20000044

08000b28 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <SD_disk_write+0x1c>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <SD_disk_write+0x20>
 8000b44:	2304      	movs	r3, #4
 8000b46:	e06b      	b.n	8000c20 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SD_disk_write+0x100>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SD_disk_write+0x32>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e062      	b.n	8000c20 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b5a:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <SD_disk_write+0x100>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SD_disk_write+0x44>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e059      	b.n	8000c20 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <SD_disk_write+0x104>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <SD_disk_write+0x56>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	025b      	lsls	r3, r3, #9
 8000b7c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b7e:	f7ff fcb9 	bl	80004f4 <SELECT>

	if (count == 1)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d110      	bne.n	8000baa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	2058      	movs	r0, #88	@ 0x58
 8000b8c:	f7ff fe11 	bl	80007b2 <SD_SendCmd>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d13a      	bne.n	8000c0c <SD_disk_write+0xe4>
 8000b96:	21fe      	movs	r1, #254	@ 0xfe
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f7ff fdc7 	bl	800072c <SD_TxDataBlock>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d033      	beq.n	8000c0c <SD_disk_write+0xe4>
			count = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	e030      	b.n	8000c0c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <SD_disk_write+0x104>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2077      	movs	r0, #119	@ 0x77
 8000bba:	f7ff fdfa 	bl	80007b2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	2057      	movs	r0, #87	@ 0x57
 8000bc2:	f7ff fdf6 	bl	80007b2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2059      	movs	r0, #89	@ 0x59
 8000bca:	f7ff fdf2 	bl	80007b2 <SD_SendCmd>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d11b      	bne.n	8000c0c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd4:	21fc      	movs	r1, #252	@ 0xfc
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f7ff fda8 	bl	800072c <SD_TxDataBlock>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <SD_disk_write+0xd0>
				buff += 512;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1ee      	bne.n	8000bd4 <SD_disk_write+0xac>
 8000bf6:	e000      	b.n	8000bfa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bf8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bfa:	21fd      	movs	r1, #253	@ 0xfd
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fd95 	bl	800072c <SD_TxDataBlock>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <SD_disk_write+0xe4>
			{
				count = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c0c:	f7ff fc80 	bl	8000510 <DESELECT>
	SPI_RxByte();
 8000c10:	f7ff fcc0 	bl	8000594 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000044 	.word	0x20000044

08000c30 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b08b      	sub	sp, #44	@ 0x2c
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	603a      	str	r2, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SD_disk_ioctl+0x1e>
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	e113      	b.n	8000e76 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	2b05      	cmp	r3, #5
 8000c58:	d124      	bne.n	8000ca4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d012      	beq.n	8000c88 <SD_disk_ioctl+0x58>
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	dc1a      	bgt.n	8000c9c <SD_disk_ioctl+0x6c>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <SD_disk_ioctl+0x40>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d006      	beq.n	8000c7c <SD_disk_ioctl+0x4c>
 8000c6e:	e015      	b.n	8000c9c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c70:	f7ff fd16 	bl	80006a0 <SD_PowerOff>
			res = RES_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c7a:	e0fa      	b.n	8000e72 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c7c:	f7ff fcce 	bl	800061c <SD_PowerOn>
			res = RES_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c86:	e0f4      	b.n	8000e72 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	1c5c      	adds	r4, r3, #1
 8000c8c:	f7ff fd14 	bl	80006b8 <SD_CheckPower>
 8000c90:	4603      	mov	r3, r0
 8000c92:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c9a:	e0ea      	b.n	8000e72 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ca2:	e0e6      	b.n	8000e72 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ca4:	4b76      	ldr	r3, [pc, #472]	@ (8000e80 <SD_disk_ioctl+0x250>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SD_disk_ioctl+0x86>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e0df      	b.n	8000e76 <SD_disk_ioctl+0x246>

		SELECT();
 8000cb6:	f7ff fc1d 	bl	80004f4 <SELECT>

		switch (ctrl)
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	f200 80c9 	bhi.w	8000e54 <SD_disk_ioctl+0x224>
 8000cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc8 <SD_disk_ioctl+0x98>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000dbf 	.word	0x08000dbf
 8000ccc:	08000d01 	.word	0x08000d01
 8000cd0:	08000daf 	.word	0x08000daf
 8000cd4:	08000e55 	.word	0x08000e55
 8000cd8:	08000e55 	.word	0x08000e55
 8000cdc:	08000e55 	.word	0x08000e55
 8000ce0:	08000e55 	.word	0x08000e55
 8000ce4:	08000e55 	.word	0x08000e55
 8000ce8:	08000e55 	.word	0x08000e55
 8000cec:	08000e55 	.word	0x08000e55
 8000cf0:	08000e55 	.word	0x08000e55
 8000cf4:	08000dd1 	.word	0x08000dd1
 8000cf8:	08000df5 	.word	0x08000df5
 8000cfc:	08000e19 	.word	0x08000e19
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d00:	2100      	movs	r1, #0
 8000d02:	2049      	movs	r0, #73	@ 0x49
 8000d04:	f7ff fd55 	bl	80007b2 <SD_SendCmd>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 80a6 	bne.w	8000e5c <SD_disk_ioctl+0x22c>
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2110      	movs	r1, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcda 	bl	80006d0 <SD_RxDataBlock>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 809c 	beq.w	8000e5c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d24:	7b3b      	ldrb	r3, [r7, #12]
 8000d26:	099b      	lsrs	r3, r3, #6
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d10d      	bne.n	8000d4a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d2e:	7d7b      	ldrb	r3, [r7, #21]
 8000d30:	461a      	mov	r2, r3
 8000d32:	7d3b      	ldrb	r3, [r7, #20]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d40:	8bfb      	ldrh	r3, [r7, #30]
 8000d42:	029a      	lsls	r2, r3, #10
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e02d      	b.n	8000da6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	7dbb      	ldrb	r3, [r7, #22]
 8000d54:	09db      	lsrs	r3, r3, #7
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	7d7b      	ldrb	r3, [r7, #21]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0306 	and.w	r3, r3, #6
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d72:	7d3b      	ldrb	r3, [r7, #20]
 8000d74:	099b      	lsrs	r3, r3, #6
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	7cbb      	ldrb	r3, [r7, #18]
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d98:	8bfa      	ldrh	r2, [r7, #30]
 8000d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d9e:	3b09      	subs	r3, #9
 8000da0:	409a      	lsls	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dac:	e056      	b.n	8000e5c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dbc:	e055      	b.n	8000e6a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dbe:	f7ff fc13 	bl	80005e8 <SD_ReadyWait>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2bff      	cmp	r3, #255	@ 0xff
 8000dc6:	d14b      	bne.n	8000e60 <SD_disk_ioctl+0x230>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e047      	b.n	8000e60 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2049      	movs	r0, #73	@ 0x49
 8000dd4:	f7ff fced 	bl	80007b2 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d142      	bne.n	8000e64 <SD_disk_ioctl+0x234>
 8000dde:	2110      	movs	r1, #16
 8000de0:	6a38      	ldr	r0, [r7, #32]
 8000de2:	f7ff fc75 	bl	80006d0 <SD_RxDataBlock>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d03b      	beq.n	8000e64 <SD_disk_ioctl+0x234>
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000df2:	e037      	b.n	8000e64 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000df4:	2100      	movs	r1, #0
 8000df6:	204a      	movs	r0, #74	@ 0x4a
 8000df8:	f7ff fcdb 	bl	80007b2 <SD_SendCmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d132      	bne.n	8000e68 <SD_disk_ioctl+0x238>
 8000e02:	2110      	movs	r1, #16
 8000e04:	6a38      	ldr	r0, [r7, #32]
 8000e06:	f7ff fc63 	bl	80006d0 <SD_RxDataBlock>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d02b      	beq.n	8000e68 <SD_disk_ioctl+0x238>
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e16:	e027      	b.n	8000e68 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	207a      	movs	r0, #122	@ 0x7a
 8000e1c:	f7ff fcc9 	bl	80007b2 <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e2c:	e00b      	b.n	8000e46 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e2e:	6a3c      	ldr	r4, [r7, #32]
 8000e30:	1c63      	adds	r3, r4, #1
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	f7ff fbae 	bl	8000594 <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e40:	3301      	adds	r3, #1
 8000e42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d9ef      	bls.n	8000e2e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e54:	2304      	movs	r3, #4
 8000e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e5a:	e006      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e5c:	bf00      	nop
 8000e5e:	e004      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e60:	bf00      	nop
 8000e62:	e002      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <SD_disk_ioctl+0x23a>
			break;
 8000e68:	bf00      	nop
		}

		DESELECT();
 8000e6a:	f7ff fb51 	bl	8000510 <DESELECT>
		SPI_RxByte();
 8000e6e:	f7ff fb91 	bl	8000594 <SPI_RxByte>
	}

	return res;
 8000e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	372c      	adds	r7, #44	@ 0x2c
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f000 fa52 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f830 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 f8e2 	bl	8001058 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000e94:	f001 fe50 	bl	8002b38 <MX_FATFS_Init>
  MX_CRC_Init();
 8000e98:	f000 f894 	bl	8000fc4 <MX_CRC_Init>
  MX_SPI1_Init();
 8000e9c:	f000 f8a6 	bl	8000fec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000ea0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ea4:	f000 fab6 	bl	8001414 <HAL_Delay>
  f_mount(&fs, "", 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	490c      	ldr	r1, [pc, #48]	@ (8000edc <main+0x58>)
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <main+0x5c>)
 8000eae:	f004 f891 	bl	8004fd4 <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000eb2:	2213      	movs	r2, #19
 8000eb4:	490b      	ldr	r1, [pc, #44]	@ (8000ee4 <main+0x60>)
 8000eb6:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <main+0x64>)
 8000eb8:	f004 f8d2 	bl	8005060 <f_open>
  f_lseek(&fil, f_size(&fil));
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <main+0x64>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <main+0x64>)
 8000ec4:	f004 fcd0 	bl	8005868 <f_lseek>
  f_puts("Hello World\n", &fil);
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <main+0x64>)
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <main+0x68>)
 8000ecc:	f004 ff67 	bl	8005d9e <f_puts>
  f_close(&fil);
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <main+0x64>)
 8000ed2:	f004 fc9f 	bl	8005814 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed6:	bf00      	nop
 8000ed8:	e7fd      	b.n	8000ed6 <main+0x52>
 8000eda:	bf00      	nop
 8000edc:	0800609c 	.word	0x0800609c
 8000ee0:	200000a8 	.word	0x200000a8
 8000ee4:	080060a0 	.word	0x080060a0
 8000ee8:	200010e0 	.word	0x200010e0
 8000eec:	080060ac 	.word	0x080060ac

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	@ 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2230      	movs	r2, #48	@ 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 f894 	bl	800602c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <SystemClock_Config+0xcc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <SystemClock_Config+0xcc>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <SystemClock_Config+0xd0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <SystemClock_Config+0xd0>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f64:	23a8      	movs	r3, #168	@ 0xa8
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd29 	bl	80019cc <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f80:	f000 f8ba 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ff8a 	bl	8001ebc <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fae:	f000 f8a3 	bl	80010f8 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	@ 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_CRC_Init+0x20>)
 8000fca:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <MX_CRC_Init+0x24>)
 8000fcc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_CRC_Init+0x20>)
 8000fd0:	f000 fb29 	bl	8001626 <HAL_CRC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fda:	f000 f88d 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000048 	.word	0x20000048
 8000fe8:	40023000 	.word	0x40023000

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_SPI1_Init+0x64>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	@ (8001054 <MX_SPI1_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800101c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001038:	220a      	movs	r2, #10
 800103a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <MX_SPI1_Init+0x64>)
 800103e:	f001 f929 	bl	8002294 <HAL_SPI_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001048:	f000 f856 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000050 	.word	0x20000050
 8001054:	40013000 	.word	0x40013000

08001058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_GPIO_Init+0x98>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_GPIO_Init+0x98>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_GPIO_Init+0x98>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_GPIO_Init+0x98>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <MX_GPIO_Init+0x98>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_GPIO_Init+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_GPIO_Init+0x98>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <MX_GPIO_Init+0x98>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_GPIO_Init+0x98>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2102      	movs	r1, #2
 80010c6:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010c8:	f000 fc66 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010cc:	2302      	movs	r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010e4:	f000 fabc 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020800 	.word	0x40020800

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <Error_Handler+0x8>

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_MspInit+0x4c>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_MspInit+0x4c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_CRC_MspInit+0x3c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10d      	bne.n	8001182 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_CRC_MspInit+0x40>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a09      	ldr	r2, [pc, #36]	@ (8001194 <HAL_CRC_MspInit+0x40>)
 8001170:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <HAL_CRC_MspInit+0x40>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023000 	.word	0x40023000
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	@ (800121c <HAL_SPI_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12b      	bne.n	8001212 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_SPI_MspInit+0x88>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_SPI_MspInit+0x88>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_SPI_MspInit+0x88>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_SPI_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	@ (8001220 <HAL_SPI_MspInit+0x88>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_SPI_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	23e0      	movs	r3, #224	@ 0xe0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001202:	2305      	movs	r3, #5
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <HAL_SPI_MspInit+0x8c>)
 800120e:	f000 fa27 	bl	8001660 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	@ 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40013000 	.word	0x40013000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <SysTick_Handler+0x34>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <SysTick_Handler+0x18>
		Timer1--;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <SysTick_Handler+0x34>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	3b01      	subs	r3, #1
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <SysTick_Handler+0x34>)
 8001292:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <SysTick_Handler+0x38>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <SysTick_Handler+0x2c>
		Timer2--;
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <SysTick_Handler+0x38>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <SysTick_Handler+0x38>)
 80012a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f894 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000040 	.word	0x20000040
 80012b4:	20000042 	.word	0x20000042

080012b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001314 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012e0:	f7ff ffea 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	@ (800131c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f004 fe97 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fdb9 	bl	8000e84 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001320:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8001324:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001328:	20002350 	.word	0x20002350

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f931 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fece 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f93b 	bl	800160e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f911 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000004 	.word	0x20000004
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000008 	.word	0x20000008

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	20002110 	.word	0x20002110

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20002110 	.word	0x20002110

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	@ (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	@ (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	@ 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff47 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff5c 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffb0 	bl	800157c <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e00e      	b.n	8001656 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	795b      	ldrb	r3, [r3, #5]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d105      	bne.n	800164e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fd83 	bl	8001154 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e16b      	b.n	8001954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 815a 	bne.w	800194e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d130      	bne.n	8001714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 0201 	and.w	r2, r3, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b03      	cmp	r3, #3
 800171e:	d017      	beq.n	8001750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d123      	bne.n	80017a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	69b9      	ldr	r1, [r7, #24]
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80b4 	beq.w	800194e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b60      	ldr	r3, [pc, #384]	@ (800196c <HAL_GPIO_Init+0x30c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a5f      	ldr	r2, [pc, #380]	@ (800196c <HAL_GPIO_Init+0x30c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_GPIO_Init+0x30c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <HAL_GPIO_Init+0x310>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a52      	ldr	r2, [pc, #328]	@ (8001974 <HAL_GPIO_Init+0x314>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_GPIO_Init+0x226>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a51      	ldr	r2, [pc, #324]	@ (8001978 <HAL_GPIO_Init+0x318>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d025      	beq.n	8001882 <HAL_GPIO_Init+0x222>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a50      	ldr	r2, [pc, #320]	@ (800197c <HAL_GPIO_Init+0x31c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01f      	beq.n	800187e <HAL_GPIO_Init+0x21e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	@ (8001980 <HAL_GPIO_Init+0x320>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0x21a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4e      	ldr	r2, [pc, #312]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x216>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4d      	ldr	r2, [pc, #308]	@ (8001988 <HAL_GPIO_Init+0x328>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x212>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4c      	ldr	r2, [pc, #304]	@ (800198c <HAL_GPIO_Init+0x32c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x20e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4b      	ldr	r2, [pc, #300]	@ (8001990 <HAL_GPIO_Init+0x330>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x20a>
 8001866:	2307      	movs	r3, #7
 8001868:	e00e      	b.n	8001888 <HAL_GPIO_Init+0x228>
 800186a:	2308      	movs	r3, #8
 800186c:	e00c      	b.n	8001888 <HAL_GPIO_Init+0x228>
 800186e:	2306      	movs	r3, #6
 8001870:	e00a      	b.n	8001888 <HAL_GPIO_Init+0x228>
 8001872:	2305      	movs	r3, #5
 8001874:	e008      	b.n	8001888 <HAL_GPIO_Init+0x228>
 8001876:	2304      	movs	r3, #4
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x228>
 800187a:	2303      	movs	r3, #3
 800187c:	e004      	b.n	8001888 <HAL_GPIO_Init+0x228>
 800187e:	2302      	movs	r3, #2
 8001880:	e002      	b.n	8001888 <HAL_GPIO_Init+0x228>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x228>
 8001886:	2300      	movs	r3, #0
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f002 0203 	and.w	r2, r2, #3
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	4093      	lsls	r3, r2
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001898:	4935      	ldr	r1, [pc, #212]	@ (8001970 <HAL_GPIO_Init+0x310>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_GPIO_Init+0x334>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ca:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <HAL_GPIO_Init+0x334>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <HAL_GPIO_Init+0x334>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f4:	4a27      	ldr	r2, [pc, #156]	@ (8001994 <HAL_GPIO_Init+0x334>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_GPIO_Init+0x334>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800191e:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <HAL_GPIO_Init+0x334>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_GPIO_Init+0x334>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001948:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <HAL_GPIO_Init+0x334>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b0f      	cmp	r3, #15
 8001958:	f67f ae90 	bls.w	800167c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3724      	adds	r7, #36	@ 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400
 800197c:	40020800 	.word	0x40020800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40021000 	.word	0x40021000
 8001988:	40021400 	.word	0x40021400
 800198c:	40021800 	.word	0x40021800
 8001990:	40021c00 	.word	0x40021c00
 8001994:	40013c00 	.word	0x40013c00

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e267      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019ea:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d00c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f6:	4b85      	ldr	r3, [pc, #532]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d112      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a02:	4b82      	ldr	r3, [pc, #520]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a0e:	d10b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	4b7e      	ldr	r3, [pc, #504]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d05b      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x108>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d157      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e242      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a30:	d106      	bne.n	8001a40 <HAL_RCC_OscConfig+0x74>
 8001a32:	4b76      	ldr	r3, [pc, #472]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a75      	ldr	r2, [pc, #468]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xb0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x98>
 8001a4a:	4b70      	ldr	r3, [pc, #448]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b6d      	ldr	r3, [pc, #436]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xb0>
 8001a64:	4b69      	ldr	r3, [pc, #420]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a68      	ldr	r2, [pc, #416]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a65      	ldr	r2, [pc, #404]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fcba 	bl	80013fc <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fcb6 	bl	80013fc <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	@ 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e207      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xc0>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fca6 	bl	80013fc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fca2 	bl	80013fc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	@ 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1f3      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b51      	ldr	r3, [pc, #324]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xe8>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b47      	ldr	r3, [pc, #284]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afa:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b41      	ldr	r3, [pc, #260]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x152>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c7      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4937      	ldr	r1, [pc, #220]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <HAL_RCC_OscConfig+0x244>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff fc5b 	bl	80013fc <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fc57 	bl	80013fc <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1a8      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4925      	ldr	r1, [pc, #148]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <HAL_RCC_OscConfig+0x244>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc3a 	bl	80013fc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc36 	bl	80013fc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e187      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d036      	beq.n	8001c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_RCC_OscConfig+0x248>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fc1a 	bl	80013fc <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fc16 	bl	80013fc <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e167      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x200>
 8001bea:	e01b      	b.n	8001c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_RCC_OscConfig+0x248>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fc03 	bl	80013fc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	e00e      	b.n	8001c18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fbff 	bl	80013fc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d907      	bls.n	8001c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e150      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	42470000 	.word	0x42470000
 8001c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b88      	ldr	r3, [pc, #544]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ea      	bne.n	8001bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8097 	beq.w	8001d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b81      	ldr	r3, [pc, #516]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b7d      	ldr	r3, [pc, #500]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b77      	ldr	r3, [pc, #476]	@ (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b74      	ldr	r3, [pc, #464]	@ (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a73      	ldr	r2, [pc, #460]	@ (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fbbf 	bl	80013fc <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7ff fbbb 	bl	80013fc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e10c      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b6a      	ldr	r3, [pc, #424]	@ (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2ea>
 8001ca8:	4b64      	ldr	r3, [pc, #400]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	4a63      	ldr	r2, [pc, #396]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x324>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x30c>
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cca:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	4a5b      	ldr	r2, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x324>
 8001cd8:	4b58      	ldr	r3, [pc, #352]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a57      	ldr	r2, [pc, #348]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce4:	4b55      	ldr	r3, [pc, #340]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a54      	ldr	r2, [pc, #336]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cea:	f023 0304 	bic.w	r3, r3, #4
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d015      	beq.n	8001d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fb80 	bl	80013fc <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff fb7c 	bl	80013fc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0cb      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ee      	beq.n	8001d00 <HAL_RCC_OscConfig+0x334>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff fb6a 	bl	80013fc <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fb66 	bl	80013fc <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0b5      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d42:	4b3e      	ldr	r3, [pc, #248]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ee      	bne.n	8001d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a38      	ldr	r2, [pc, #224]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a1 	beq.w	8001eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6a:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d05c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d141      	bne.n	8001e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <HAL_RCC_OscConfig+0x478>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb3a 	bl	80013fc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff fb36 	bl	80013fc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e087      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	019b      	lsls	r3, r3, #6
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	491b      	ldr	r1, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x478>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb0f 	bl	80013fc <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff fb0b 	bl	80013fc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e05c      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x416>
 8001e00:	e054      	b.n	8001eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_RCC_OscConfig+0x478>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff faf8 	bl	80013fc <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff faf4 	bl	80013fc <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e045      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x444>
 8001e2e:	e03d      	b.n	8001eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e038      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
 8001e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <HAL_RCC_OscConfig+0x4ec>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d028      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d121      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d11a      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d111      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0cc      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b68      	ldr	r3, [pc, #416]	@ (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d90c      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b63      	ldr	r3, [pc, #396]	@ (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0b8      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f10:	4b59      	ldr	r3, [pc, #356]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a58      	ldr	r2, [pc, #352]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f28:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b50      	ldr	r3, [pc, #320]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	494d      	ldr	r1, [pc, #308]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d044      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d119      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e07f      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d003      	beq.n	8001f7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06f      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e067      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b37      	ldr	r3, [pc, #220]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4934      	ldr	r1, [pc, #208]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fac:	f7ff fa26 	bl	80013fc <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7ff fa22 	bl	80013fc <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04f      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d20c      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e032      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4916      	ldr	r1, [pc, #88]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	490e      	ldr	r1, [pc, #56]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002042:	f000 f821 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002046:	4602      	mov	r2, r0
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	490a      	ldr	r1, [pc, #40]	@ (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	5ccb      	ldrb	r3, [r1, r3]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f986 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023c00 	.word	0x40023c00
 8002078:	40023800 	.word	0x40023800
 800207c:	08006104 	.word	0x08006104
 8002080:	20000004 	.word	0x20000004
 8002084:	20000008 	.word	0x20000008

08002088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800208c:	b094      	sub	sp, #80	@ 0x50
 800208e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a0:	4b79      	ldr	r3, [pc, #484]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x40>
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	f200 80e1 	bhi.w	8002274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x34>
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ba:	e0db      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b73      	ldr	r3, [pc, #460]	@ (800228c <HAL_RCC_GetSysClockFreq+0x204>)
 80020be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020c0:	e0db      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020c2:	4b73      	ldr	r3, [pc, #460]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x208>)
 80020c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020c6:	e0d8      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d063      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020de:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	2200      	movs	r2, #0
 80020e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020fa:	4622      	mov	r2, r4
 80020fc:	462b      	mov	r3, r5
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210c:	0150      	lsls	r0, r2, #5
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4621      	mov	r1, r4
 8002114:	1a51      	subs	r1, r2, r1
 8002116:	6139      	str	r1, [r7, #16]
 8002118:	4629      	mov	r1, r5
 800211a:	eb63 0301 	sbc.w	r3, r3, r1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800212c:	4659      	mov	r1, fp
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	4651      	mov	r1, sl
 8002132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002136:	4651      	mov	r1, sl
 8002138:	018a      	lsls	r2, r1, #6
 800213a:	4651      	mov	r1, sl
 800213c:	ebb2 0801 	subs.w	r8, r2, r1
 8002140:	4659      	mov	r1, fp
 8002142:	eb63 0901 	sbc.w	r9, r3, r1
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800215a:	4690      	mov	r8, r2
 800215c:	4699      	mov	r9, r3
 800215e:	4623      	mov	r3, r4
 8002160:	eb18 0303 	adds.w	r3, r8, r3
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	462b      	mov	r3, r5
 8002168:	eb49 0303 	adc.w	r3, r9, r3
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800217a:	4629      	mov	r1, r5
 800217c:	024b      	lsls	r3, r1, #9
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002184:	4621      	mov	r1, r4
 8002186:	024a      	lsls	r2, r1, #9
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800218e:	2200      	movs	r2, #0
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002198:	f7fe f816 	bl	80001c8 <__aeabi_uldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021a4:	e058      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a6:	4b38      	ldr	r3, [pc, #224]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	2200      	movs	r2, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	4611      	mov	r1, r2
 80021b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80021bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021c0:	4642      	mov	r2, r8
 80021c2:	464b      	mov	r3, r9
 80021c4:	f04f 0000 	mov.w	r0, #0
 80021c8:	f04f 0100 	mov.w	r1, #0
 80021cc:	0159      	lsls	r1, r3, #5
 80021ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d2:	0150      	lsls	r0, r2, #5
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4641      	mov	r1, r8
 80021da:	ebb2 0a01 	subs.w	sl, r2, r1
 80021de:	4649      	mov	r1, r9
 80021e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021f8:	ebb2 040a 	subs.w	r4, r2, sl
 80021fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	00eb      	lsls	r3, r5, #3
 800220a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800220e:	00e2      	lsls	r2, r4, #3
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	4643      	mov	r3, r8
 8002216:	18e3      	adds	r3, r4, r3
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	464b      	mov	r3, r9
 800221c:	eb45 0303 	adc.w	r3, r5, r3
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222e:	4629      	mov	r1, r5
 8002230:	028b      	lsls	r3, r1, #10
 8002232:	4621      	mov	r1, r4
 8002234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002238:	4621      	mov	r1, r4
 800223a:	028a      	lsls	r2, r1, #10
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002242:	2200      	movs	r2, #0
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	61fa      	str	r2, [r7, #28]
 8002248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224c:	f7fd ffbc 	bl	80001c8 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800226a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_RCC_GetSysClockFreq+0x204>)
 8002276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800227c:	4618      	mov	r0, r3
 800227e:	3750      	adds	r7, #80	@ 0x50
 8002280:	46bd      	mov	sp, r7
 8002282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	00f42400 	.word	0x00f42400
 8002290:	007a1200 	.word	0x007a1200

08002294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07b      	b.n	800239e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022b6:	d009      	beq.n	80022cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
 80022be:	e005      	b.n	80022cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe ff56 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002350:	ea42 0103 	orr.w	r1, r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	f003 0104 	and.w	r1, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	f003 0210 	and.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800238c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b088      	sub	sp, #32
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023b6:	f7ff f821 	bl	80013fc <HAL_GetTick>
 80023ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d001      	beq.n	80023d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	e12a      	b.n	8002626 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_SPI_Transmit+0x36>
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e122      	b.n	8002626 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_SPI_Transmit+0x48>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e11b      	b.n	8002626 <HAL_SPI_Transmit+0x280>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800243c:	d10f      	bne.n	800245e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800244c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800245c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	d007      	beq.n	800247c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002484:	d152      	bne.n	800252c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_SPI_Transmit+0xee>
 800248e:	8b7b      	ldrh	r3, [r7, #26]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d145      	bne.n	8002520 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	1c9a      	adds	r2, r3, #2
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024b8:	e032      	b.n	8002520 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d112      	bne.n	80024ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	1c9a      	adds	r2, r3, #2
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024ec:	e018      	b.n	8002520 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ee:	f7fe ff85 	bl	80013fc <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d803      	bhi.n	8002506 <HAL_SPI_Transmit+0x160>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d102      	bne.n	800250c <HAL_SPI_Transmit+0x166>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e082      	b.n	8002626 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1c7      	bne.n	80024ba <HAL_SPI_Transmit+0x114>
 800252a:	e053      	b.n	80025d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_SPI_Transmit+0x194>
 8002534:	8b7b      	ldrh	r3, [r7, #26]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d147      	bne.n	80025ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002560:	e033      	b.n	80025ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d113      	bne.n	8002598 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002596:	e018      	b.n	80025ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002598:	f7fe ff30 	bl	80013fc <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d803      	bhi.n	80025b0 <HAL_SPI_Transmit+0x20a>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d102      	bne.n	80025b6 <HAL_SPI_Transmit+0x210>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e02d      	b.n	8002626 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1c6      	bne.n	8002562 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fa59 	bl	8002a90 <SPI_EndRxTxTransaction>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002624:	2300      	movs	r3, #0
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b08a      	sub	sp, #40	@ 0x28
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800263c:	2301      	movs	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002640:	f7fe fedc 	bl	80013fc <HAL_GetTick>
 8002644:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800264c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d00c      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x4a>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002664:	d106      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x46>
 800266e:	7ffb      	ldrb	r3, [r7, #31]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d001      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
 8002676:	e17f      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_SPI_TransmitReceive+0x5c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_TransmitReceive+0x5c>
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e174      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_SPI_TransmitReceive+0x6e>
 8002698:	2302      	movs	r3, #2
 800269a:	e16d      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d003      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2205      	movs	r2, #5
 80026b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f8:	2b40      	cmp	r3, #64	@ 0x40
 80026fa:	d007      	beq.n	800270c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002714:	d17e      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_TransmitReceive+0xf6>
 800271e:	8afb      	ldrh	r3, [r7, #22]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d16c      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	1c9a      	adds	r2, r3, #2
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002748:	e059      	b.n	80027fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d11b      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x162>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x162>
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	2b01      	cmp	r3, #1
 8002766:	d113      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d119      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x1a4>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d014      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	b292      	uxth	r2, r2
 80027b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027d2:	f7fe fe13 	bl	80013fc <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027de:	429a      	cmp	r2, r3
 80027e0:	d80d      	bhi.n	80027fe <HAL_SPI_TransmitReceive+0x1d0>
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d009      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0bc      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1a0      	bne.n	800274a <HAL_SPI_TransmitReceive+0x11c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d19b      	bne.n	800274a <HAL_SPI_TransmitReceive+0x11c>
 8002812:	e082      	b.n	800291a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_SPI_TransmitReceive+0x1f4>
 800281c:	8afb      	ldrh	r3, [r7, #22]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d171      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002848:	e05d      	b.n	8002906 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b02      	cmp	r3, #2
 8002856:	d11c      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x264>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d017      	beq.n	8002892 <HAL_SPI_TransmitReceive+0x264>
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	2b01      	cmp	r3, #1
 8002866:	d114      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d119      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2a6>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d014      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028d4:	f7fe fd92 	bl	80013fc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d803      	bhi.n	80028ec <HAL_SPI_TransmitReceive+0x2be>
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d102      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x2c4>
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e038      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d19c      	bne.n	800284a <HAL_SPI_TransmitReceive+0x21c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d197      	bne.n	800284a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8b6 	bl	8002a90 <SPI_EndRxTxTransaction>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e01d      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002976:	2300      	movs	r3, #0
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3728      	adds	r7, #40	@ 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002990:	f7fe fd34 	bl	80013fc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	4413      	add	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029a0:	f7fe fd2c 	bl	80013fc <HAL_GetTick>
 80029a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029a6:	4b39      	ldr	r3, [pc, #228]	@ (8002a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	0d1b      	lsrs	r3, r3, #20
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b6:	e055      	b.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d051      	beq.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029c0:	f7fe fd1c 	bl	80013fc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d902      	bls.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d13d      	bne.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ee:	d111      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029f8:	d004      	beq.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a02:	d107      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1c:	d10f      	bne.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e018      	b.n	8002a84 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	e002      	b.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d19a      	bne.n	80029b8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000004 	.word	0x20000004

08002a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ff6a 	bl	8002980 <SPI_WaitFlagStateUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e032      	b.n	8002b28 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <SPI_EndRxTxTransaction+0xa0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b34 <SPI_EndRxTxTransaction+0xa4>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	0d5b      	lsrs	r3, r3, #21
 8002ace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ae0:	d112      	bne.n	8002b08 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff ff47 	bl	8002980 <SPI_WaitFlagStateUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e00f      	b.n	8002b28 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	2b80      	cmp	r3, #128	@ 0x80
 8002b20:	d0f2      	beq.n	8002b08 <SPI_EndRxTxTransaction+0x78>
 8002b22:	e000      	b.n	8002b26 <SPI_EndRxTxTransaction+0x96>
        break;
 8002b24:	bf00      	nop
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000004 	.word	0x20000004
 8002b34:	165e9f81 	.word	0x165e9f81

08002b38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002b3c:	4904      	ldr	r1, [pc, #16]	@ (8002b50 <MX_FATFS_Init+0x18>)
 8002b3e:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <MX_FATFS_Init+0x1c>)
 8002b40:	f003 f99e 	bl	8005e80 <FATFS_LinkDriver>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <MX_FATFS_Init+0x20>)
 8002b4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20002118 	.word	0x20002118
 8002b54:	20000010 	.word	0x20000010
 8002b58:	20002114 	.word	0x20002114

08002b5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002b60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fe6f 	bl	800085c <SD_disk_initialize>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd ff46 	bl	8000a28 <SD_disk_status>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8002bb8:	7bf8      	ldrb	r0, [r7, #15]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	f7fd ff48 	bl	8000a54 <SD_disk_read>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8002be0:	7bf8      	ldrb	r0, [r7, #15]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	f7fd ff9e 	bl	8000b28 <SD_disk_write>
 8002bec:	4603      	mov	r3, r0
 8002bee:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	603a      	str	r2, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
 8002c04:	460b      	mov	r3, r1
 8002c06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	79b9      	ldrb	r1, [r7, #6]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f80e 	bl	8000c30 <SD_disk_ioctl>
 8002c14:	4603      	mov	r3, r0
 8002c16:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <disk_status+0x30>)
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	79fa      	ldrb	r2, [r7, #7]
 8002c38:	4905      	ldr	r1, [pc, #20]	@ (8002c50 <disk_status+0x30>)
 8002c3a:	440a      	add	r2, r1
 8002c3c:	7a12      	ldrb	r2, [r2, #8]
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4798      	blx	r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20002344 	.word	0x20002344

08002c54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca0 <disk_initialize+0x4c>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d114      	bne.n	8002c96 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <disk_initialize+0x4c>)
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	4909      	ldr	r1, [pc, #36]	@ (8002ca0 <disk_initialize+0x4c>)
 8002c7c:	440a      	add	r2, r1
 8002c7e:	7a12      	ldrb	r2, [r2, #8]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4798      	blx	r3
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4a03      	ldr	r2, [pc, #12]	@ (8002ca0 <disk_initialize+0x4c>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20002344 	.word	0x20002344

08002ca4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <disk_read+0x3c>)
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	689c      	ldr	r4, [r3, #8]
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	@ (8002ce0 <disk_read+0x3c>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	7a18      	ldrb	r0, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	47a0      	blx	r4
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20002344 	.word	0x20002344

08002ce4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <disk_write+0x3c>)
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	68dc      	ldr	r4, [r3, #12]
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	4a07      	ldr	r2, [pc, #28]	@ (8002d20 <disk_write+0x3c>)
 8002d04:	4413      	add	r3, r2
 8002d06:	7a18      	ldrb	r0, [r3, #8]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	47a0      	blx	r4
 8002d10:	4603      	mov	r3, r0
 8002d12:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20002344 	.word	0x20002344

08002d24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	603a      	str	r2, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	460b      	mov	r3, r1
 8002d32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <disk_ioctl+0x38>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	79fa      	ldrb	r2, [r7, #7]
 8002d42:	4906      	ldr	r1, [pc, #24]	@ (8002d5c <disk_ioctl+0x38>)
 8002d44:	440a      	add	r2, r1
 8002d46:	7a10      	ldrb	r0, [r2, #8]
 8002d48:	79b9      	ldrb	r1, [r7, #6]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4798      	blx	r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
  return res;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20002344 	.word	0x20002344

08002d60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002d84:	89fb      	ldrh	r3, [r7, #14]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	3202      	adds	r2, #2
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	3201      	adds	r2, #1
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
	return rv;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	887a      	ldrh	r2, [r7, #2]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	1c53      	adds	r3, r2, #1
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	6179      	str	r1, [r7, #20]
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f1      	bne.n	8002e80 <mem_cpy+0x1a>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	617a      	str	r2, [r7, #20]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f3      	bne.n	8002eb8 <mem_set+0x10>
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002ede:	b480      	push	{r7}
 8002ee0:	b089      	sub	sp, #36	@ 0x24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	61fa      	str	r2, [r7, #28]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	61ba      	str	r2, [r7, #24]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	1acb      	subs	r3, r1, r3
 8002f0a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <mem_cmp+0x40>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0eb      	beq.n	8002ef6 <mem_cmp+0x18>

	return r;
 8002f1e:	697b      	ldr	r3, [r7, #20]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3724      	adds	r7, #36	@ 0x24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002f36:	e002      	b.n	8002f3e <chk_chr+0x12>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <chk_chr+0x26>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d1f2      	bne.n	8002f38 <chk_chr+0xc>
	return *str;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	781b      	ldrb	r3, [r3, #0]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e029      	b.n	8002fcc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002f78:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <chk_lock+0xb4>)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4413      	add	r3, r2
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01d      	beq.n	8002fc2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002f86:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <chk_lock+0xb4>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d116      	bne.n	8002fc6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <chk_lock+0xb4>)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d10c      	bne.n	8002fc6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002fac:	4a1a      	ldr	r2, [pc, #104]	@ (8003018 <chk_lock+0xb4>)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d102      	bne.n	8002fc6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002fc0:	e007      	b.n	8002fd2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d9d2      	bls.n	8002f78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d109      	bne.n	8002fec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <chk_lock+0x80>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d101      	bne.n	8002fe8 <chk_lock+0x84>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e010      	b.n	800300a <chk_lock+0xa6>
 8002fe8:	2312      	movs	r3, #18
 8002fea:	e00e      	b.n	800300a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <chk_lock+0xa0>
 8002ff2:	4a09      	ldr	r2, [pc, #36]	@ (8003018 <chk_lock+0xb4>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4413      	add	r3, r2
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003002:	d101      	bne.n	8003008 <chk_lock+0xa4>
 8003004:	2310      	movs	r3, #16
 8003006:	e000      	b.n	800300a <chk_lock+0xa6>
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20002124 	.word	0x20002124

0800301c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	e002      	b.n	800302e <enq_lock+0x12>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3301      	adds	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d806      	bhi.n	8003042 <enq_lock+0x26>
 8003034:	4a09      	ldr	r2, [pc, #36]	@ (800305c <enq_lock+0x40>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	4413      	add	r3, r2
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f2      	bne.n	8003028 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b02      	cmp	r3, #2
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20002124 	.word	0x20002124

08003060 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e01f      	b.n	80030b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003070:	4a41      	ldr	r2, [pc, #260]	@ (8003178 <inc_lock+0x118>)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4413      	add	r3, r2
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d113      	bne.n	80030aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003082:	4a3d      	ldr	r2, [pc, #244]	@ (8003178 <inc_lock+0x118>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003092:	429a      	cmp	r2, r3
 8003094:	d109      	bne.n	80030aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003096:	4a38      	ldr	r2, [pc, #224]	@ (8003178 <inc_lock+0x118>)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	3308      	adds	r3, #8
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d006      	beq.n	80030b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d9dc      	bls.n	8003070 <inc_lock+0x10>
 80030b6:	e000      	b.n	80030ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80030b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d132      	bne.n	8003126 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e002      	b.n	80030cc <inc_lock+0x6c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d806      	bhi.n	80030e0 <inc_lock+0x80>
 80030d2:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <inc_lock+0x118>)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f2      	bne.n	80030c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d101      	bne.n	80030ea <inc_lock+0x8a>
 80030e6:	2300      	movs	r3, #0
 80030e8:	e040      	b.n	800316c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4922      	ldr	r1, [pc, #136]	@ (8003178 <inc_lock+0x118>)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	440b      	add	r3, r1
 80030f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	491e      	ldr	r1, [pc, #120]	@ (8003178 <inc_lock+0x118>)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	3304      	adds	r3, #4
 8003106:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	491a      	ldr	r1, [pc, #104]	@ (8003178 <inc_lock+0x118>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	440b      	add	r3, r1
 8003114:	3308      	adds	r3, #8
 8003116:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003118:	4a17      	ldr	r2, [pc, #92]	@ (8003178 <inc_lock+0x118>)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	4413      	add	r3, r2
 8003120:	330c      	adds	r3, #12
 8003122:	2200      	movs	r2, #0
 8003124:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <inc_lock+0xe0>
 800312c:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <inc_lock+0x118>)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	330c      	adds	r3, #12
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <inc_lock+0xe0>
 800313c:	2300      	movs	r3, #0
 800313e:	e015      	b.n	800316c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d108      	bne.n	8003158 <inc_lock+0xf8>
 8003146:	4a0c      	ldr	r2, [pc, #48]	@ (8003178 <inc_lock+0x118>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	4413      	add	r3, r2
 800314e:	330c      	adds	r3, #12
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	e001      	b.n	800315c <inc_lock+0xfc>
 8003158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800315c:	4906      	ldr	r1, [pc, #24]	@ (8003178 <inc_lock+0x118>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	440b      	add	r3, r1
 8003164:	330c      	adds	r3, #12
 8003166:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3301      	adds	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	20002124 	.word	0x20002124

0800317c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d825      	bhi.n	80031dc <dec_lock+0x60>
		n = Files[i].ctr;
 8003190:	4a17      	ldr	r2, [pc, #92]	@ (80031f0 <dec_lock+0x74>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	4413      	add	r3, r2
 8003198:	330c      	adds	r3, #12
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a4:	d101      	bne.n	80031aa <dec_lock+0x2e>
 80031a6:	2300      	movs	r3, #0
 80031a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80031aa:	89fb      	ldrh	r3, [r7, #14]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <dec_lock+0x3a>
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80031b6:	4a0e      	ldr	r2, [pc, #56]	@ (80031f0 <dec_lock+0x74>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4413      	add	r3, r2
 80031be:	330c      	adds	r3, #12
 80031c0:	89fa      	ldrh	r2, [r7, #14]
 80031c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80031c4:	89fb      	ldrh	r3, [r7, #14]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <dec_lock+0x5a>
 80031ca:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <dec_lock+0x74>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	737b      	strb	r3, [r7, #13]
 80031da:	e001      	b.n	80031e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80031dc:	2302      	movs	r3, #2
 80031de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80031e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20002124 	.word	0x20002124

080031f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e010      	b.n	8003224 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003202:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <clear_lock+0x44>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	4413      	add	r3, r2
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d105      	bne.n	800321e <clear_lock+0x2a>
 8003212:	4a09      	ldr	r2, [pc, #36]	@ (8003238 <clear_lock+0x44>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d9eb      	bls.n	8003202 <clear_lock+0xe>
	}
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20002124 	.word	0x20002124

0800323c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	78db      	ldrb	r3, [r3, #3]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d034      	beq.n	80032ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003254:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7858      	ldrb	r0, [r3, #1]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003260:	2301      	movs	r3, #1
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	f7ff fd3e 	bl	8002ce4 <disk_write>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <sync_window+0x38>
			res = FR_DISK_ERR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	e022      	b.n	80032ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	429a      	cmp	r2, r3
 8003288:	d217      	bcs.n	80032ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	789b      	ldrb	r3, [r3, #2]
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e010      	b.n	80032b4 <sync_window+0x78>
					wsect += fs->fsize;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4413      	add	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7858      	ldrb	r0, [r3, #1]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80032a6:	2301      	movs	r3, #1
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	f7ff fd1b 	bl	8002ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d8eb      	bhi.n	8003292 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d01b      	beq.n	8003314 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffad 	bl	800323c <sync_window>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d113      	bne.n	8003314 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7858      	ldrb	r0, [r3, #1]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80032f6:	2301      	movs	r3, #1
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	f7ff fcd3 	bl	8002ca4 <disk_read>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003304:	f04f 33ff 	mov.w	r3, #4294967295
 8003308:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff87 	bl	800323c <sync_window>
 800332e:	4603      	mov	r3, r0
 8003330:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d159      	bne.n	80033ec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d149      	bne.n	80033d4 <sync_fs+0xb4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	791b      	ldrb	r3, [r3, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d145      	bne.n	80033d4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	899b      	ldrh	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	2100      	movs	r1, #0
 8003356:	f7ff fda7 	bl	8002ea8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3338      	adds	r3, #56	@ 0x38
 800335e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003362:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fd36 	bl	8002dd8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3338      	adds	r3, #56	@ 0x38
 8003370:	4921      	ldr	r1, [pc, #132]	@ (80033f8 <sync_fs+0xd8>)
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd4b 	bl	8002e0e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3338      	adds	r3, #56	@ 0x38
 800337c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003380:	491e      	ldr	r1, [pc, #120]	@ (80033fc <sync_fs+0xdc>)
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fd43 	bl	8002e0e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3338      	adds	r3, #56	@ 0x38
 800338c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7ff fd39 	bl	8002e0e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3338      	adds	r3, #56	@ 0x38
 80033a0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7ff fd2f 	bl	8002e0e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7858      	ldrb	r0, [r3, #1]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c8:	2301      	movs	r3, #1
 80033ca:	f7ff fc8b 	bl	8002ce4 <disk_write>
			fs->fsi_flag = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fca1 	bl	8002d24 <disk_ioctl>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <sync_fs+0xcc>
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	41615252 	.word	0x41615252
 80033fc:	61417272 	.word	0x61417272

08003400 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	3b02      	subs	r3, #2
 800340e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	3b02      	subs	r3, #2
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d301      	bcc.n	8003420 <clust2sect+0x20>
 800341c:	2300      	movs	r3, #0
 800341e:	e008      	b.n	8003432 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	895b      	ldrh	r3, [r3, #10]
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	fb03 f202 	mul.w	r2, r3, r2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	4413      	add	r3, r2
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d904      	bls.n	800345e <get_fat+0x20>
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <get_fat+0x26>
		val = 1;	/* Internal error */
 800345e:	2301      	movs	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e0ba      	b.n	80035da <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b03      	cmp	r3, #3
 8003470:	f000 8082 	beq.w	8003578 <get_fat+0x13a>
 8003474:	2b03      	cmp	r3, #3
 8003476:	f300 80a6 	bgt.w	80035c6 <get_fat+0x188>
 800347a:	2b01      	cmp	r3, #1
 800347c:	d002      	beq.n	8003484 <get_fat+0x46>
 800347e:	2b02      	cmp	r3, #2
 8003480:	d055      	beq.n	800352e <get_fat+0xf0>
 8003482:	e0a0      	b.n	80035c6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	899b      	ldrh	r3, [r3, #12]
 800349a:	4619      	mov	r1, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	fbb3 f3f1 	udiv	r3, r3, r1
 80034a2:	4413      	add	r3, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	6938      	ldr	r0, [r7, #16]
 80034a8:	f7ff ff0c 	bl	80032c4 <move_window>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 808c 	bne.w	80035cc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	60fa      	str	r2, [r7, #12]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	8992      	ldrh	r2, [r2, #12]
 80034be:	fbb3 f1f2 	udiv	r1, r3, r2
 80034c2:	fb01 f202 	mul.w	r2, r1, r2
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	899b      	ldrh	r3, [r3, #12]
 80034da:	4619      	mov	r1, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	4413      	add	r3, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	6938      	ldr	r0, [r7, #16]
 80034e8:	f7ff feec 	bl	80032c4 <move_window>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d16e      	bne.n	80035d0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	899b      	ldrh	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80034fe:	fb01 f202 	mul.w	r2, r1, r2
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <get_fat+0xe6>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	e002      	b.n	800352a <get_fat+0xec>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	617b      	str	r3, [r7, #20]
			break;
 800352c:	e055      	b.n	80035da <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	899b      	ldrh	r3, [r3, #12]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003542:	4413      	add	r3, r2
 8003544:	4619      	mov	r1, r3
 8003546:	6938      	ldr	r0, [r7, #16]
 8003548:	f7ff febc 	bl	80032c4 <move_window>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d140      	bne.n	80035d4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	8992      	ldrh	r2, [r2, #12]
 8003560:	fbb3 f0f2 	udiv	r0, r3, r2
 8003564:	fb00 f202 	mul.w	r2, r0, r2
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	440b      	add	r3, r1
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fbf7 	bl	8002d60 <ld_word>
 8003572:	4603      	mov	r3, r0
 8003574:	617b      	str	r3, [r7, #20]
			break;
 8003576:	e030      	b.n	80035da <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	899b      	ldrh	r3, [r3, #12]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	b29b      	uxth	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	fbb3 f3f1 	udiv	r3, r3, r1
 800358c:	4413      	add	r3, r2
 800358e:	4619      	mov	r1, r3
 8003590:	6938      	ldr	r0, [r7, #16]
 8003592:	f7ff fe97 	bl	80032c4 <move_window>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d11d      	bne.n	80035d8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	8992      	ldrh	r2, [r2, #12]
 80035aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80035ae:	fb00 f202 	mul.w	r2, r0, r2
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fbeb 	bl	8002d92 <ld_dword>
 80035bc:	4603      	mov	r3, r0
 80035be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80035c2:	617b      	str	r3, [r7, #20]
			break;
 80035c4:	e009      	b.n	80035da <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80035c6:	2301      	movs	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e006      	b.n	80035da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035cc:	bf00      	nop
 80035ce:	e004      	b.n	80035da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80035d8:	bf00      	nop
		}
	}

	return val;
 80035da:	697b      	ldr	r3, [r7, #20]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b089      	sub	sp, #36	@ 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80035f0:	2302      	movs	r3, #2
 80035f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f240 8109 	bls.w	800380e <put_fat+0x22a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	f080 8103 	bcs.w	800380e <put_fat+0x22a>
		switch (fs->fs_type) {
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b03      	cmp	r3, #3
 800360e:	f000 80b6 	beq.w	800377e <put_fat+0x19a>
 8003612:	2b03      	cmp	r3, #3
 8003614:	f300 80fb 	bgt.w	800380e <put_fat+0x22a>
 8003618:	2b01      	cmp	r3, #1
 800361a:	d003      	beq.n	8003624 <put_fat+0x40>
 800361c:	2b02      	cmp	r3, #2
 800361e:	f000 8083 	beq.w	8003728 <put_fat+0x144>
 8003622:	e0f4      	b.n	800380e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	899b      	ldrh	r3, [r3, #12]
 800363a:	4619      	mov	r1, r3
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003642:	4413      	add	r3, r2
 8003644:	4619      	mov	r1, r3
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fe3c 	bl	80032c4 <move_window>
 800364c:	4603      	mov	r3, r0
 800364e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003650:	7ffb      	ldrb	r3, [r7, #31]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 80d4 	bne.w	8003800 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	61ba      	str	r2, [r7, #24]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	8992      	ldrh	r2, [r2, #12]
 8003668:	fbb3 f0f2 	udiv	r0, r3, r2
 800366c:	fb00 f202 	mul.w	r2, r0, r2
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	440b      	add	r3, r1
 8003674:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <put_fat+0xb8>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b25b      	sxtb	r3, r3
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	b25a      	sxtb	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	b25b      	sxtb	r3, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	b25b      	sxtb	r3, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	b25b      	sxtb	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e001      	b.n	80036a0 <put_fat+0xbc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	899b      	ldrh	r3, [r3, #12]
 80036b2:	4619      	mov	r1, r3
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ba:	4413      	add	r3, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff fe00 	bl	80032c4 <move_window>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 809a 	bne.w	8003804 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	899b      	ldrh	r3, [r3, #12]
 80036da:	461a      	mov	r2, r3
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fbb3 f0f2 	udiv	r0, r3, r2
 80036e2:	fb00 f202 	mul.w	r2, r0, r2
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	440b      	add	r3, r1
 80036ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <put_fat+0x11a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e00e      	b.n	800371c <put_fat+0x138>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b25b      	sxtb	r3, r3
 8003704:	f023 030f 	bic.w	r3, r3, #15
 8003708:	b25a      	sxtb	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	b25b      	sxtb	r3, r3
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	b25b      	sxtb	r3, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	b25b      	sxtb	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	70da      	strb	r2, [r3, #3]
			break;
 8003726:	e072      	b.n	800380e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	899b      	ldrh	r3, [r3, #12]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	fbb3 f3f1 	udiv	r3, r3, r1
 800373c:	4413      	add	r3, r2
 800373e:	4619      	mov	r1, r3
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fdbf 	bl	80032c4 <move_window>
 8003746:	4603      	mov	r3, r0
 8003748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d15b      	bne.n	8003808 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	8992      	ldrh	r2, [r2, #12]
 800375e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003762:	fb00 f202 	mul.w	r2, r0, r2
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	440b      	add	r3, r1
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	b292      	uxth	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fb31 	bl	8002dd8 <st_word>
			fs->wflag = 1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	70da      	strb	r2, [r3, #3]
			break;
 800377c:	e047      	b.n	800380e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	899b      	ldrh	r3, [r3, #12]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	b29b      	uxth	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003792:	4413      	add	r3, r2
 8003794:	4619      	mov	r1, r3
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff fd94 	bl	80032c4 <move_window>
 800379c:	4603      	mov	r3, r0
 800379e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d132      	bne.n	800380c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	8992      	ldrh	r2, [r2, #12]
 80037ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80037be:	fb00 f202 	mul.w	r2, r0, r2
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fae3 	bl	8002d92 <ld_dword>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037d2:	4323      	orrs	r3, r4
 80037d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	8992      	ldrh	r2, [r2, #12]
 80037e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80037e8:	fb00 f202 	mul.w	r2, r0, r2
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fb0b 	bl	8002e0e <st_dword>
			fs->wflag = 1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	70da      	strb	r2, [r3, #3]
			break;
 80037fe:	e006      	b.n	800380e <put_fat+0x22a>
			if (res != FR_OK) break;
 8003800:	bf00      	nop
 8003802:	e004      	b.n	800380e <put_fat+0x22a>
			if (res != FR_OK) break;
 8003804:	bf00      	nop
 8003806:	e002      	b.n	800380e <put_fat+0x22a>
			if (res != FR_OK) break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <put_fat+0x22a>
			if (res != FR_OK) break;
 800380c:	bf00      	nop
		}
	}
	return res;
 800380e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3724      	adds	r7, #36	@ 0x24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd90      	pop	{r4, r7, pc}

08003818 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d904      	bls.n	800383e <remove_chain+0x26>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d301      	bcc.n	8003842 <remove_chain+0x2a>
 800383e:	2302      	movs	r3, #2
 8003840:	e04b      	b.n	80038da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	69b8      	ldr	r0, [r7, #24]
 8003850:	f7ff fec8 	bl	80035e4 <put_fat>
 8003854:	4603      	mov	r3, r0
 8003856:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003858:	7ffb      	ldrb	r3, [r7, #31]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <remove_chain+0x4a>
 800385e:	7ffb      	ldrb	r3, [r7, #31]
 8003860:	e03b      	b.n	80038da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff fdea 	bl	800343e <get_fat>
 800386a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d031      	beq.n	80038d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <remove_chain+0x64>
 8003878:	2302      	movs	r3, #2
 800387a:	e02e      	b.n	80038da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d101      	bne.n	8003888 <remove_chain+0x70>
 8003884:	2301      	movs	r3, #1
 8003886:	e028      	b.n	80038da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003888:	2200      	movs	r2, #0
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	f7ff fea9 	bl	80035e4 <put_fat>
 8003892:	4603      	mov	r3, r0
 8003894:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <remove_chain+0x88>
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	e01c      	b.n	80038da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	3b02      	subs	r3, #2
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d20b      	bcs.n	80038c6 <remove_chain+0xae>
			fs->free_clst++;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3c6      	bcc.n	8003862 <remove_chain+0x4a>
 80038d4:	e000      	b.n	80038d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80038d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b088      	sub	sp, #32
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <create_chain+0x2c>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d31b      	bcc.n	8003946 <create_chain+0x64>
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e018      	b.n	8003946 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fd91 	bl	800343e <get_fat>
 800391c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d801      	bhi.n	8003928 <create_chain+0x46>
 8003924:	2301      	movs	r3, #1
 8003926:	e070      	b.n	8003a0a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d101      	bne.n	8003934 <create_chain+0x52>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	e06a      	b.n	8003a0a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d201      	bcs.n	8003942 <create_chain+0x60>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	e063      	b.n	8003a0a <create_chain+0x128>
		scl = clst;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	429a      	cmp	r2, r3
 8003958:	d307      	bcc.n	800396a <create_chain+0x88>
				ncl = 2;
 800395a:	2302      	movs	r3, #2
 800395c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	429a      	cmp	r2, r3
 8003964:	d901      	bls.n	800396a <create_chain+0x88>
 8003966:	2300      	movs	r3, #0
 8003968:	e04f      	b.n	8003a0a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800396a:	69f9      	ldr	r1, [r7, #28]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff fd66 	bl	800343e <get_fat>
 8003972:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d003      	beq.n	8003988 <create_chain+0xa6>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d101      	bne.n	800398c <create_chain+0xaa>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	e03e      	b.n	8003a0a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	d1da      	bne.n	800394a <create_chain+0x68>
 8003994:	2300      	movs	r3, #0
 8003996:	e038      	b.n	8003a0a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003998:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800399a:	f04f 32ff 	mov.w	r2, #4294967295
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	6938      	ldr	r0, [r7, #16]
 80039a2:	f7ff fe1f 	bl	80035e4 <put_fat>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <create_chain+0xe2>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	6938      	ldr	r0, [r7, #16]
 80039bc:	f7ff fe12 	bl	80035e4 <put_fat>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <create_chain+0x116>
		fs->last_clst = ncl;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	3b02      	subs	r3, #2
 80039da:	429a      	cmp	r2, r3
 80039dc:	d804      	bhi.n	80039e8 <create_chain+0x106>
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	791b      	ldrb	r3, [r3, #4]
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	711a      	strb	r2, [r3, #4]
 80039f6:	e007      	b.n	8003a08 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d102      	bne.n	8003a04 <create_chain+0x122>
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	e000      	b.n	8003a06 <create_chain+0x124>
 8003a04:	2301      	movs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003a08:	69fb      	ldr	r3, [r7, #28]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	3304      	adds	r3, #4
 8003a28:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	899b      	ldrh	r3, [r3, #12]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	8952      	ldrh	r2, [r2, #10]
 8003a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1d1a      	adds	r2, r3, #4
 8003a44:	613a      	str	r2, [r7, #16]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <clmt_clust+0x42>
 8003a50:	2300      	movs	r3, #0
 8003a52:	e010      	b.n	8003a76 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d307      	bcc.n	8003a6c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	3304      	adds	r3, #4
 8003a68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003a6a:	e7e9      	b.n	8003a40 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003a6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4413      	add	r3, r2
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a98:	d204      	bcs.n	8003aa4 <dir_sdi+0x22>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e071      	b.n	8003b8c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <dir_sdi+0x46>
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	8912      	ldrh	r2, [r2, #8]
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d301      	bcc.n	8003ade <dir_sdi+0x5c>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e056      	b.n	8003b8c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	61da      	str	r2, [r3, #28]
 8003ae6:	e02d      	b.n	8003b44 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	895b      	ldrh	r3, [r3, #10]
 8003aec:	461a      	mov	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	899b      	ldrh	r3, [r3, #12]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003af8:	e019      	b.n	8003b2e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fc9d 	bl	800343e <get_fat>
 8003b04:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d101      	bne.n	8003b12 <dir_sdi+0x90>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e03c      	b.n	8003b8c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d904      	bls.n	8003b22 <dir_sdi+0xa0>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d301      	bcc.n	8003b26 <dir_sdi+0xa4>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e032      	b.n	8003b8c <dir_sdi+0x10a>
			ofs -= csz;
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d2e1      	bcs.n	8003afa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003b36:	6979      	ldr	r1, [r7, #20]
 8003b38:	6938      	ldr	r0, [r7, #16]
 8003b3a:	f7ff fc61 	bl	8003400 <clust2sect>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <dir_sdi+0xd4>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e01a      	b.n	8003b8c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	899b      	ldrh	r3, [r3, #12]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	899b      	ldrh	r3, [r3, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b7e:	fb00 f202 	mul.w	r2, r0, r2
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	18ca      	adds	r2, r1, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	3320      	adds	r3, #32
 8003baa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <dir_next+0x28>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bba:	d301      	bcc.n	8003bc0 <dir_next+0x2c>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e0bb      	b.n	8003d38 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	899b      	ldrh	r3, [r3, #12]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bcc:	fb01 f202 	mul.w	r2, r1, r2
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 809d 	bne.w	8003d12 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	8912      	ldrh	r2, [r2, #8]
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	f0c0 808d 	bcc.w	8003d12 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	2304      	movs	r3, #4
 8003c00:	e09a      	b.n	8003d38 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	899b      	ldrh	r3, [r3, #12]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	8952      	ldrh	r2, [r2, #10]
 8003c12:	3a01      	subs	r2, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d17b      	bne.n	8003d12 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7ff fc0b 	bl	800343e <get_fat>
 8003c28:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d801      	bhi.n	8003c34 <dir_next+0xa0>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e081      	b.n	8003d38 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d101      	bne.n	8003c40 <dir_next+0xac>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e07b      	b.n	8003d38 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d359      	bcc.n	8003cfe <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
 8003c56:	2304      	movs	r3, #4
 8003c58:	e06e      	b.n	8003d38 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff fe3d 	bl	80038e2 <create_chain>
 8003c68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <dir_next+0xe0>
 8003c70:	2307      	movs	r3, #7
 8003c72:	e061      	b.n	8003d38 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <dir_next+0xea>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e05c      	b.n	8003d38 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d101      	bne.n	8003c8a <dir_next+0xf6>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e056      	b.n	8003d38 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fad6 	bl	800323c <sync_window>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <dir_next+0x106>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e04e      	b.n	8003d38 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	899b      	ldrh	r3, [r3, #12]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f7ff f8fe 	bl	8002ea8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff fba4 	bl	8003400 <clust2sect>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cbe:	e012      	b.n	8003ce6 <dir_next+0x152>
						fs->wflag = 1;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff fab8 	bl	800323c <sync_window>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <dir_next+0x142>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e030      	b.n	8003d38 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	895b      	ldrh	r3, [r3, #10]
 8003cea:	461a      	mov	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d3e6      	bcc.n	8003cc0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7ff fb7a 	bl	8003400 <clust2sect>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	899b      	ldrh	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d2a:	fb00 f202 	mul.w	r2, r0, r2
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	18ca      	adds	r2, r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003d50:	2100      	movs	r1, #0
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fe95 	bl	8003a82 <dir_sdi>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d12b      	bne.n	8003dba <dir_alloc+0x7a>
		n = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff faa9 	bl	80032c4 <move_window>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11d      	bne.n	8003db8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2be5      	cmp	r3, #229	@ 0xe5
 8003d84:	d004      	beq.n	8003d90 <dir_alloc+0x50>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	3301      	adds	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d102      	bne.n	8003da4 <dir_alloc+0x64>
 8003d9e:	e00c      	b.n	8003dba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003da4:	2101      	movs	r1, #1
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fef4 	bl	8003b94 <dir_next>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0d7      	beq.n	8003d66 <dir_alloc+0x26>
 8003db6:	e000      	b.n	8003dba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003db8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d101      	bne.n	8003dc4 <dir_alloc+0x84>
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	75fb      	strb	r3, [r7, #23]
	return res;
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	331a      	adds	r3, #26
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe ffbf 	bl	8002d60 <ld_word>
 8003de2:	4603      	mov	r3, r0
 8003de4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d109      	bne.n	8003e02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe ffb4 	bl	8002d60 <ld_word>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	331a      	adds	r3, #26
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe ffd8 	bl	8002dd8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d109      	bne.n	8003e44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f103 0214 	add.w	r2, r3, #20
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7fe ffca 	bl	8002dd8 <st_word>
	}
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	331a      	adds	r3, #26
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe ff80 	bl	8002d60 <ld_word>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <cmp_lfn+0x1e>
 8003e66:	2300      	movs	r3, #0
 8003e68:	e059      	b.n	8003f1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003e80:	2301      	movs	r3, #1
 8003e82:	81fb      	strh	r3, [r7, #14]
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	e033      	b.n	8003ef2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003e8a:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <cmp_lfn+0xdc>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe ff61 	bl	8002d60 <ld_word>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003ea2:	89fb      	ldrh	r3, [r7, #14]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01a      	beq.n	8003ede <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2bfe      	cmp	r3, #254	@ 0xfe
 8003eac:	d812      	bhi.n	8003ed4 <cmp_lfn+0x88>
 8003eae:	89bb      	ldrh	r3, [r7, #12]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f002 f831 	bl	8005f18 <ff_wtoupper>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461c      	mov	r4, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	617a      	str	r2, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f002 f825 	bl	8005f18 <ff_wtoupper>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	d001      	beq.n	8003ed8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e022      	b.n	8003f1e <cmp_lfn+0xd2>
			}
			wc = uc;
 8003ed8:	89bb      	ldrh	r3, [r7, #12]
 8003eda:	81fb      	strh	r3, [r7, #14]
 8003edc:	e006      	b.n	8003eec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003ede:	89bb      	ldrh	r3, [r7, #12]
 8003ee0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d001      	beq.n	8003eec <cmp_lfn+0xa0>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e018      	b.n	8003f1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	d9c8      	bls.n	8003e8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <cmp_lfn+0xd0>
 8003f04:	89fb      	ldrh	r3, [r7, #14]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <cmp_lfn+0xd0>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <cmp_lfn+0xd0>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003f1c:	2301      	movs	r3, #1
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}
 8003f26:	bf00      	nop
 8003f28:	08006194 	.word	0x08006194

08003f2c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	71fb      	strb	r3, [r7, #7]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	330d      	adds	r3, #13
 8003f46:	79ba      	ldrb	r2, [r7, #6]
 8003f48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	330b      	adds	r3, #11
 8003f4e:	220f      	movs	r2, #15
 8003f50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	330c      	adds	r3, #12
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	331a      	adds	r3, #26
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe ff39 	bl	8002dd8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	1e5a      	subs	r2, r3, #1
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	82fb      	strh	r3, [r7, #22]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003f7e:	8afb      	ldrh	r3, [r7, #22]
 8003f80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <put_lfn+0x6c>
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	61fa      	str	r2, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003f98:	4a17      	ldr	r2, [pc, #92]	@ (8003ff8 <put_lfn+0xcc>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	8afa      	ldrh	r2, [r7, #22]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe ff14 	bl	8002dd8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003fb0:	8afb      	ldrh	r3, [r7, #22]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <put_lfn+0x90>
 8003fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d9da      	bls.n	8003f7e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003fc8:	8afb      	ldrh	r3, [r7, #22]
 8003fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d006      	beq.n	8003fe0 <put_lfn+0xb4>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <put_lfn+0xbc>
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	79fa      	ldrb	r2, [r7, #7]
 8003fec:	701a      	strb	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	08006194 	.word	0x08006194

08003ffc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	@ 0x30
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800400a:	220b      	movs	r2, #11
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7fe ff29 	bl	8002e66 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d92b      	bls.n	8004072 <gen_numname+0x76>
		sr = seq;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800401e:	e022      	b.n	8004066 <gen_numname+0x6a>
			wc = *lfn++;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800402a:	2300      	movs	r3, #0
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402e:	e017      	b.n	8004060 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005a      	lsls	r2, r3, #1
 8004034:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800403e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <gen_numname+0x5e>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004054:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004058:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	3301      	adds	r3, #1
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d9e4      	bls.n	8004030 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1d8      	bne.n	8004020 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004072:	2307      	movs	r3, #7
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3330      	adds	r3, #48	@ 0x30
 8004082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800408a:	2b39      	cmp	r3, #57	@ 0x39
 800408c:	d904      	bls.n	8004098 <gen_numname+0x9c>
 800408e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004092:	3307      	adds	r3, #7
 8004094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800409e:	3330      	adds	r3, #48	@ 0x30
 80040a0:	443b      	add	r3, r7
 80040a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80040a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1df      	bne.n	8004076 <gen_numname+0x7a>
	ns[i] = '~';
 80040b6:	f107 0214 	add.w	r2, r7, #20
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	4413      	add	r3, r2
 80040be:	227e      	movs	r2, #126	@ 0x7e
 80040c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c6:	e002      	b.n	80040ce <gen_numname+0xd2>
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	3301      	adds	r3, #1
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d205      	bcs.n	80040e2 <gen_numname+0xe6>
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d1f2      	bne.n	80040c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	2b07      	cmp	r3, #7
 80040e6:	d807      	bhi.n	80040f8 <gen_numname+0xfc>
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040ee:	3330      	adds	r3, #48	@ 0x30
 80040f0:	443b      	add	r3, r7
 80040f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80040f6:	e000      	b.n	80040fa <gen_numname+0xfe>
 80040f8:	2120      	movs	r1, #32
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	460a      	mov	r2, r1
 8004106:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	2b07      	cmp	r3, #7
 800410c:	d9e9      	bls.n	80040e2 <gen_numname+0xe6>
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3730      	adds	r7, #48	@ 0x30
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004124:	230b      	movs	r3, #11
 8004126:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	0852      	lsrs	r2, r2, #1
 800412e:	01db      	lsls	r3, r3, #7
 8004130:	4313      	orrs	r3, r2
 8004132:	b2da      	uxtb	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1c59      	adds	r1, r3, #1
 8004138:	6079      	str	r1, [r7, #4]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4413      	add	r3, r2
 800413e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3b01      	subs	r3, #1
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ed      	bne.n	8004128 <sum_sfn+0x10>
	return sum;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004168:	2100      	movs	r1, #0
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fc89 	bl	8003a82 <dir_sdi>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <dir_find+0x24>
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	e0a9      	b.n	80042d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800417e:	23ff      	movs	r3, #255	@ 0xff
 8004180:	753b      	strb	r3, [r7, #20]
 8004182:	7d3b      	ldrb	r3, [r7, #20]
 8004184:	757b      	strb	r3, [r7, #21]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4619      	mov	r1, r3
 8004194:	6938      	ldr	r0, [r7, #16]
 8004196:	f7ff f895 	bl	80032c4 <move_window>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 8090 	bne.w	80042c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80041ae:	7dbb      	ldrb	r3, [r7, #22]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <dir_find+0x60>
 80041b4:	2304      	movs	r3, #4
 80041b6:	75fb      	strb	r3, [r7, #23]
 80041b8:	e08a      	b.n	80042d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	330b      	adds	r3, #11
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80041ce:	7dbb      	ldrb	r3, [r7, #22]
 80041d0:	2be5      	cmp	r3, #229	@ 0xe5
 80041d2:	d007      	beq.n	80041e4 <dir_find+0x8a>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <dir_find+0x98>
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d006      	beq.n	80041f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80041e4:	23ff      	movs	r3, #255	@ 0xff
 80041e6:	757b      	strb	r3, [r7, #21]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80041f0:	e05e      	b.n	80042b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d136      	bne.n	8004266 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d154      	bne.n	80042b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004206:	7dbb      	ldrb	r3, [r7, #22]
 8004208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	7b5b      	ldrb	r3, [r3, #13]
 8004216:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004218:	7dbb      	ldrb	r3, [r7, #22]
 800421a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800421e:	75bb      	strb	r3, [r7, #22]
 8004220:	7dbb      	ldrb	r3, [r7, #22]
 8004222:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800422c:	7dba      	ldrb	r2, [r7, #22]
 800422e:	7d7b      	ldrb	r3, [r7, #21]
 8004230:	429a      	cmp	r2, r3
 8004232:	d115      	bne.n	8004260 <dir_find+0x106>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	330d      	adds	r3, #13
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	7d3a      	ldrb	r2, [r7, #20]
 800423e:	429a      	cmp	r2, r3
 8004240:	d10e      	bne.n	8004260 <dir_find+0x106>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7ff fdfd 	bl	8003e4c <cmp_lfn>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <dir_find+0x106>
 8004258:	7d7b      	ldrb	r3, [r7, #21]
 800425a:	3b01      	subs	r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e000      	b.n	8004262 <dir_find+0x108>
 8004260:	23ff      	movs	r3, #255	@ 0xff
 8004262:	757b      	strb	r3, [r7, #21]
 8004264:	e024      	b.n	80042b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004266:	7d7b      	ldrb	r3, [r7, #21]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <dir_find+0x126>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff51 	bl	8004118 <sum_sfn>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	7d3b      	ldrb	r3, [r7, #20]
 800427c:	4293      	cmp	r3, r2
 800427e:	d024      	beq.n	80042ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <dir_find+0x14a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a18      	ldr	r0, [r3, #32]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	@ 0x24
 8004296:	220b      	movs	r2, #11
 8004298:	4619      	mov	r1, r3
 800429a:	f7fe fe20 	bl	8002ede <mem_cmp>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d014      	beq.n	80042ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80042a4:	23ff      	movs	r3, #255	@ 0xff
 80042a6:	757b      	strb	r3, [r7, #21]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f04f 32ff 	mov.w	r2, #4294967295
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80042b0:	2100      	movs	r1, #0
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fc6e 	bl	8003b94 <dir_next>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f43f af65 	beq.w	800418e <dir_find+0x34>
 80042c4:	e004      	b.n	80042d0 <dir_find+0x176>
		if (res != FR_OK) break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80042ce:	bf00      	nop

	return res;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	@ 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80042f0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <dir_register+0x20>
 80042f8:	2306      	movs	r3, #6
 80042fa:	e0e0      	b.n	80044be <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80042fc:	2300      	movs	r3, #0
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004300:	e002      	b.n	8004308 <dir_register+0x2c>
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	3301      	adds	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f4      	bne.n	8004302 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	220c      	movs	r2, #12
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fd9e 	bl	8002e66 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d032      	beq.n	800439a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2240      	movs	r2, #64	@ 0x40
 8004338:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800433c:	2301      	movs	r3, #1
 800433e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004340:	e016      	b.n	8004370 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	f107 010c 	add.w	r1, r7, #12
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	f7ff fe53 	bl	8003ffc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff feff 	bl	800415a <dir_find>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	3301      	adds	r3, #1
 800436e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004372:	2b63      	cmp	r3, #99	@ 0x63
 8004374:	d9e5      	bls.n	8004342 <dir_register+0x66>
 8004376:	e000      	b.n	800437a <dir_register+0x9e>
			if (res != FR_OK) break;
 8004378:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	2b64      	cmp	r3, #100	@ 0x64
 800437e:	d101      	bne.n	8004384 <dir_register+0xa8>
 8004380:	2307      	movs	r3, #7
 8004382:	e09c      	b.n	80044be <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004388:	2b04      	cmp	r3, #4
 800438a:	d002      	beq.n	8004392 <dir_register+0xb6>
 800438c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004390:	e095      	b.n	80044be <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004392:	7dfa      	ldrb	r2, [r7, #23]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <dir_register+0xd8>
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	330c      	adds	r3, #12
 80043a8:	4a47      	ldr	r2, [pc, #284]	@ (80044c8 <dir_register+0x1ec>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	3301      	adds	r3, #1
 80043b2:	e000      	b.n	80043b6 <dir_register+0xda>
 80043b4:	2301      	movs	r3, #1
 80043b6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80043b8:	6a39      	ldr	r1, [r7, #32]
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fcc0 	bl	8003d40 <dir_alloc>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80043c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d148      	bne.n	8004460 <dir_register+0x184>
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d042      	beq.n	8004460 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	015b      	lsls	r3, r3, #5
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fb4b 	bl	8003a82 <dir_sdi>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80043f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d132      	bne.n	8004460 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	@ 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fe8a 	bl	8004118 <sum_sfn>
 8004404:	4603      	mov	r3, r0
 8004406:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4619      	mov	r1, r3
 800440e:	69f8      	ldr	r0, [r7, #28]
 8004410:	f7fe ff58 	bl	80032c4 <move_window>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800441a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	6918      	ldr	r0, [r3, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a19      	ldr	r1, [r3, #32]
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	7efb      	ldrb	r3, [r7, #27]
 8004430:	f7ff fd7c 	bl	8003f2c <put_lfn>
				fs->wflag = 1;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2201      	movs	r2, #1
 8004438:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800443a:	2100      	movs	r1, #0
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fba9 	bl	8003b94 <dir_next>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004448:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <dir_register+0x184>
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	3b01      	subs	r3, #1
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1d5      	bne.n	8004408 <dir_register+0x12c>
 800445c:	e000      	b.n	8004460 <dir_register+0x184>
				if (res != FR_OK) break;
 800445e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004464:	2b00      	cmp	r3, #0
 8004466:	d128      	bne.n	80044ba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4619      	mov	r1, r3
 800446e:	69f8      	ldr	r0, [r7, #28]
 8004470:	f7fe ff28 	bl	80032c4 <move_window>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800447a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11b      	bne.n	80044ba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	2220      	movs	r2, #32
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fd0c 	bl	8002ea8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a18      	ldr	r0, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3324      	adds	r3, #36	@ 0x24
 8004498:	220b      	movs	r2, #11
 800449a:	4619      	mov	r1, r3
 800449c:	f7fe fce3 	bl	8002e66 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	330c      	adds	r3, #12
 80044ac:	f002 0218 	and.w	r2, r2, #24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2201      	movs	r2, #1
 80044b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80044ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3730      	adds	r7, #48	@ 0x30
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	4ec4ec4f 	.word	0x4ec4ec4f

080044cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	61ba      	str	r2, [r7, #24]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80044fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044fc:	2b1f      	cmp	r3, #31
 80044fe:	d940      	bls.n	8004582 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004500:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004502:	2b2f      	cmp	r3, #47	@ 0x2f
 8004504:	d006      	beq.n	8004514 <create_name+0x48>
 8004506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004508:	2b5c      	cmp	r3, #92	@ 0x5c
 800450a:	d110      	bne.n	800452e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800450c:	e002      	b.n	8004514 <create_name+0x48>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	3301      	adds	r3, #1
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4413      	add	r3, r2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b2f      	cmp	r3, #47	@ 0x2f
 800451e:	d0f6      	beq.n	800450e <create_name+0x42>
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	4413      	add	r3, r2
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b5c      	cmp	r3, #92	@ 0x5c
 800452a:	d0f0      	beq.n	800450e <create_name+0x42>
			break;
 800452c:	e02a      	b.n	8004584 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2bfe      	cmp	r3, #254	@ 0xfe
 8004532:	d901      	bls.n	8004538 <create_name+0x6c>
 8004534:	2306      	movs	r3, #6
 8004536:	e17d      	b.n	8004834 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004538:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800453a:	b2db      	uxtb	r3, r3
 800453c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800453e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fcac 	bl	8005ea0 <ff_convert>
 8004548:	4603      	mov	r3, r0
 800454a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800454c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <create_name+0x8a>
 8004552:	2306      	movs	r3, #6
 8004554:	e16e      	b.n	8004834 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004558:	2b7f      	cmp	r3, #127	@ 0x7f
 800455a:	d809      	bhi.n	8004570 <create_name+0xa4>
 800455c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800455e:	4619      	mov	r1, r3
 8004560:	488d      	ldr	r0, [pc, #564]	@ (8004798 <create_name+0x2cc>)
 8004562:	f7fe fce3 	bl	8002f2c <chk_chr>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <create_name+0xa4>
 800456c:	2306      	movs	r3, #6
 800456e:	e161      	b.n	8004834 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	617a      	str	r2, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800457e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004580:	e7b4      	b.n	80044ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004582:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	441a      	add	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800458e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004590:	2b1f      	cmp	r3, #31
 8004592:	d801      	bhi.n	8004598 <create_name+0xcc>
 8004594:	2304      	movs	r3, #4
 8004596:	e000      	b.n	800459a <create_name+0xce>
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800459e:	e011      	b.n	80045c4 <create_name+0xf8>
		w = lfn[di - 1];
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80045a6:	3b01      	subs	r3, #1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80045b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d002      	beq.n	80045be <create_name+0xf2>
 80045b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80045bc:	d106      	bne.n	80045cc <create_name+0x100>
		di--;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ea      	bne.n	80045a0 <create_name+0xd4>
 80045ca:	e000      	b.n	80045ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80045cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <create_name+0x118>
 80045e0:	2306      	movs	r3, #6
 80045e2:	e127      	b.n	8004834 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3324      	adds	r3, #36	@ 0x24
 80045e8:	220b      	movs	r2, #11
 80045ea:	2120      	movs	r1, #32
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fc5b 	bl	8002ea8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e002      	b.n	80045fe <create_name+0x132>
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	2b20      	cmp	r3, #32
 800460a:	d0f5      	beq.n	80045f8 <create_name+0x12c>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	2b2e      	cmp	r3, #46	@ 0x2e
 8004618:	d0ee      	beq.n	80045f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <create_name+0x168>
 8004620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004624:	f043 0303 	orr.w	r3, r3, #3
 8004628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800462c:	e002      	b.n	8004634 <create_name+0x168>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3b01      	subs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <create_name+0x182>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004640:	3b01      	subs	r3, #1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b2e      	cmp	r3, #46	@ 0x2e
 800464c:	d1ef      	bne.n	800462e <create_name+0x162>

	i = b = 0; ni = 8;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004654:	2300      	movs	r3, #0
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	2308      	movs	r3, #8
 800465a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	61ba      	str	r2, [r7, #24]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800466c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8090 	beq.w	8004794 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004676:	2b20      	cmp	r3, #32
 8004678:	d006      	beq.n	8004688 <create_name+0x1bc>
 800467a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800467c:	2b2e      	cmp	r3, #46	@ 0x2e
 800467e:	d10a      	bne.n	8004696 <create_name+0x1ca>
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	429a      	cmp	r2, r3
 8004686:	d006      	beq.n	8004696 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800468c:	f043 0303 	orr.w	r3, r3, #3
 8004690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004694:	e07d      	b.n	8004792 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	429a      	cmp	r2, r3
 800469c:	d203      	bcs.n	80046a6 <create_name+0x1da>
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d123      	bne.n	80046ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	2b0b      	cmp	r3, #11
 80046aa:	d106      	bne.n	80046ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046b0:	f043 0303 	orr.w	r3, r3, #3
 80046b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046b8:	e075      	b.n	80047a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d005      	beq.n	80046ce <create_name+0x202>
 80046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046c6:	f043 0303 	orr.w	r3, r3, #3
 80046ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d866      	bhi.n	80047a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	2308      	movs	r3, #8
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	230b      	movs	r3, #11
 80046e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80046e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80046ec:	e051      	b.n	8004792 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80046ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f2:	d914      	bls.n	800471e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80046f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fbd1 	bl	8005ea0 <ff_convert>
 80046fe:	4603      	mov	r3, r0
 8004700:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <create_name+0x246>
 8004708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800470a:	3b80      	subs	r3, #128	@ 0x80
 800470c:	4a23      	ldr	r2, [pc, #140]	@ (800479c <create_name+0x2d0>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800471e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <create_name+0x268>
 8004724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004726:	4619      	mov	r1, r3
 8004728:	481d      	ldr	r0, [pc, #116]	@ (80047a0 <create_name+0x2d4>)
 800472a:	f7fe fbff 	bl	8002f2c <chk_chr>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004734:	235f      	movs	r3, #95	@ 0x5f
 8004736:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800473c:	f043 0303 	orr.w	r3, r3, #3
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004744:	e01b      	b.n	800477e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d909      	bls.n	8004760 <create_name+0x294>
 800474c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800474e:	2b5a      	cmp	r3, #90	@ 0x5a
 8004750:	d806      	bhi.n	8004760 <create_name+0x294>
					b |= 2;
 8004752:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004756:	f043 0302 	orr.w	r3, r3, #2
 800475a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800475e:	e00e      	b.n	800477e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004760:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004762:	2b60      	cmp	r3, #96	@ 0x60
 8004764:	d90b      	bls.n	800477e <create_name+0x2b2>
 8004766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004768:	2b7a      	cmp	r3, #122	@ 0x7a
 800476a:	d808      	bhi.n	800477e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800476c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800477a:	3b20      	subs	r3, #32
 800477c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	623a      	str	r2, [r7, #32]
 8004784:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004786:	b2d1      	uxtb	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4413      	add	r3, r2
 800478c:	460a      	mov	r2, r1
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004792:	e763      	b.n	800465c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004794:	bf00      	nop
 8004796:	e006      	b.n	80047a6 <create_name+0x2da>
 8004798:	080060bc 	.word	0x080060bc
 800479c:	08006114 	.word	0x08006114
 80047a0:	080060c8 	.word	0x080060c8
			if (si > di) break;			/* No extension */
 80047a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047ac:	2be5      	cmp	r3, #229	@ 0xe5
 80047ae:	d103      	bne.n	80047b8 <create_name+0x2ec>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2205      	movs	r2, #5
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d104      	bne.n	80047c8 <create_name+0x2fc>
 80047be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80047c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d005      	beq.n	80047e0 <create_name+0x314>
 80047d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d105      	bne.n	80047ec <create_name+0x320>
 80047e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80047ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d117      	bne.n	8004828 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80047f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <create_name+0x344>
 8004804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004808:	f043 0310 	orr.w	r3, r3, #16
 800480c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004810:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b04      	cmp	r3, #4
 800481a:	d105      	bne.n	8004828 <create_name+0x35c>
 800481c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800482e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8004832:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004834:	4618      	mov	r0, r3
 8004836:	3728      	adds	r7, #40	@ 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004850:	e002      	b.n	8004858 <follow_path+0x1c>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b2f      	cmp	r3, #47	@ 0x2f
 800485e:	d0f8      	beq.n	8004852 <follow_path+0x16>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b5c      	cmp	r3, #92	@ 0x5c
 8004866:	d0f4      	beq.n	8004852 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b1f      	cmp	r3, #31
 8004874:	d80a      	bhi.n	800488c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2280      	movs	r2, #128	@ 0x80
 800487a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff f8fe 	bl	8003a82 <dir_sdi>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
 800488a:	e048      	b.n	800491e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800488c:	463b      	mov	r3, r7
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fe1b 	bl	80044cc <create_name>
 8004896:	4603      	mov	r3, r0
 8004898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d139      	bne.n	8004914 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fc5a 	bl	800415a <dir_find>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80048b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d12c      	bne.n	8004918 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80048be:	7afb      	ldrb	r3, [r7, #11]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d127      	bne.n	8004918 <follow_path+0xdc>
 80048c8:	2305      	movs	r3, #5
 80048ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80048cc:	e024      	b.n	8004918 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d121      	bne.n	800491c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	799b      	ldrb	r3, [r3, #6]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80048e4:	2305      	movs	r3, #5
 80048e6:	75fb      	strb	r3, [r7, #23]
 80048e8:	e019      	b.n	800491e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	8992      	ldrh	r2, [r2, #12]
 80048f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80048fc:	fb00 f202 	mul.w	r2, r0, r2
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	440b      	add	r3, r1
 8004904:	4619      	mov	r1, r3
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff fa61 	bl	8003dce <ld_clust>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004912:	e7bb      	b.n	800488c <follow_path+0x50>
			if (res != FR_OK) break;
 8004914:	bf00      	nop
 8004916:	e002      	b.n	800491e <follow_path+0xe2>
				break;
 8004918:	bf00      	nop
 800491a:	e000      	b.n	800491e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800491c:	bf00      	nop
			}
		}
	}

	return res;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004930:	f04f 33ff 	mov.w	r3, #4294967295
 8004934:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d031      	beq.n	80049a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e002      	b.n	800494c <get_ldnumber+0x24>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	3301      	adds	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b1f      	cmp	r3, #31
 8004952:	d903      	bls.n	800495c <get_ldnumber+0x34>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b3a      	cmp	r3, #58	@ 0x3a
 800495a:	d1f4      	bne.n	8004946 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b3a      	cmp	r3, #58	@ 0x3a
 8004962:	d11c      	bne.n	800499e <get_ldnumber+0x76>
			tp = *path;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	60fa      	str	r2, [r7, #12]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	3b30      	subs	r3, #48	@ 0x30
 8004974:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b09      	cmp	r3, #9
 800497a:	d80e      	bhi.n	800499a <get_ldnumber+0x72>
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	d10a      	bne.n	800499a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d107      	bne.n	800499a <get_ldnumber+0x72>
					vol = (int)i;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3301      	adds	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	e002      	b.n	80049a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80049a2:	693b      	ldr	r3, [r7, #16]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	70da      	strb	r2, [r3, #3]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f04f 32ff 	mov.w	r2, #4294967295
 80049c6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fe fc7a 	bl	80032c4 <move_window>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <check_fs+0x2a>
 80049d6:	2304      	movs	r3, #4
 80049d8:	e038      	b.n	8004a4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3338      	adds	r3, #56	@ 0x38
 80049de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe f9bc 	bl	8002d60 <ld_word>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <check_fs+0x48>
 80049f4:	2303      	movs	r3, #3
 80049f6:	e029      	b.n	8004a4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049fe:	2be9      	cmp	r3, #233	@ 0xe9
 8004a00:	d009      	beq.n	8004a16 <check_fs+0x66>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a08:	2beb      	cmp	r3, #235	@ 0xeb
 8004a0a:	d11e      	bne.n	8004a4a <check_fs+0x9a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004a12:	2b90      	cmp	r3, #144	@ 0x90
 8004a14:	d119      	bne.n	8004a4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3338      	adds	r3, #56	@ 0x38
 8004a1a:	3336      	adds	r3, #54	@ 0x36
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe f9b8 	bl	8002d92 <ld_dword>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a28:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <check_fs+0xa4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <check_fs+0x82>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e00c      	b.n	8004a4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3338      	adds	r3, #56	@ 0x38
 8004a36:	3352      	adds	r3, #82	@ 0x52
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe f9aa 	bl	8002d92 <ld_dword>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4a05      	ldr	r2, [pc, #20]	@ (8004a58 <check_fs+0xa8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <check_fs+0x9a>
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004a4a:	2302      	movs	r3, #2
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	00544146 	.word	0x00544146
 8004a58:	33544146 	.word	0x33544146

08004a5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b096      	sub	sp, #88	@ 0x58
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff ff59 	bl	8004928 <get_ldnumber>
 8004a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da01      	bge.n	8004a82 <find_volume+0x26>
 8004a7e:	230b      	movs	r3, #11
 8004a80:	e265      	b.n	8004f4e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004a82:	4a9f      	ldr	r2, [pc, #636]	@ (8004d00 <find_volume+0x2a4>)
 8004a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <find_volume+0x3a>
 8004a92:	230c      	movs	r3, #12
 8004a94:	e25b      	b.n	8004f4e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe f8b5 	bl	8002c20 <disk_status>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004abc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10c      	bne.n	8004ae2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <find_volume+0x82>
 8004ace:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004ada:	230a      	movs	r3, #10
 8004adc:	e237      	b.n	8004f4e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e235      	b.n	8004f4e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe f8ad 	bl	8002c54 <disk_initialize>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004b00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e21e      	b.n	8004f4e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <find_volume+0xca>
 8004b16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004b22:	230a      	movs	r3, #10
 8004b24:	e213      	b.n	8004f4e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	7858      	ldrb	r0, [r3, #1]
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2102      	movs	r1, #2
 8004b32:	f7fe f8f7 	bl	8002d24 <disk_ioctl>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <find_volume+0xe4>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e206      	b.n	8004f4e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	899b      	ldrh	r3, [r3, #12]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b48:	d80d      	bhi.n	8004b66 <find_volume+0x10a>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	899b      	ldrh	r3, [r3, #12]
 8004b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b52:	d308      	bcc.n	8004b66 <find_volume+0x10a>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b56:	899b      	ldrh	r3, [r3, #12]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	899b      	ldrh	r3, [r3, #12]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <find_volume+0x10e>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e1f1      	b.n	8004f4e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004b6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b72:	f7ff ff1d 	bl	80049b0 <check_fs>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d149      	bne.n	8004c18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b84:	2300      	movs	r3, #0
 8004b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b88:	e01e      	b.n	8004bc8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004b98:	4413      	add	r3, r2
 8004b9a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <find_volume+0x158>
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	3308      	adds	r3, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe f8f1 	bl	8002d92 <ld_dword>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	e000      	b.n	8004bb6 <find_volume+0x15a>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	3358      	adds	r3, #88	@ 0x58
 8004bbc:	443b      	add	r3, r7
 8004bbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d9dd      	bls.n	8004b8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004bce:	2300      	movs	r3, #0
 8004bd0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <find_volume+0x182>
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	3358      	adds	r3, #88	@ 0x58
 8004be4:	443b      	add	r3, r7
 8004be6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004bea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <find_volume+0x1a2>
 8004bf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004bf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bf6:	f7ff fedb 	bl	80049b0 <check_fs>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	e000      	b.n	8004c00 <find_volume+0x1a4>
 8004bfe:	2303      	movs	r3, #3
 8004c00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004c04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d905      	bls.n	8004c18 <find_volume+0x1bc>
 8004c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0e:	3301      	adds	r3, #1
 8004c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d9e2      	bls.n	8004bde <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004c18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d101      	bne.n	8004c24 <find_volume+0x1c8>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e194      	b.n	8004f4e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004c24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d901      	bls.n	8004c30 <find_volume+0x1d4>
 8004c2c:	230d      	movs	r3, #13
 8004c2e:	e18e      	b.n	8004f4e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	3338      	adds	r3, #56	@ 0x38
 8004c34:	330b      	adds	r3, #11
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe f892 	bl	8002d60 <ld_word>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	899b      	ldrh	r3, [r3, #12]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <find_volume+0x1f0>
 8004c48:	230d      	movs	r3, #13
 8004c4a:	e180      	b.n	8004f4e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	3338      	adds	r3, #56	@ 0x38
 8004c50:	3316      	adds	r3, #22
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe f884 	bl	8002d60 <ld_word>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <find_volume+0x214>
 8004c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c64:	3338      	adds	r3, #56	@ 0x38
 8004c66:	3324      	adds	r3, #36	@ 0x24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe f892 	bl	8002d92 <ld_dword>
 8004c6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c74:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	789b      	ldrb	r3, [r3, #2]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d005      	beq.n	8004c94 <find_volume+0x238>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	789b      	ldrb	r3, [r3, #2]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d001      	beq.n	8004c94 <find_volume+0x238>
 8004c90:	230d      	movs	r3, #13
 8004c92:	e15c      	b.n	8004f4e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c96:	789b      	ldrb	r3, [r3, #2]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	895b      	ldrh	r3, [r3, #10]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <find_volume+0x26c>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	895b      	ldrh	r3, [r3, #10]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbe:	895b      	ldrh	r3, [r3, #10]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <find_volume+0x270>
 8004cc8:	230d      	movs	r3, #13
 8004cca:	e140      	b.n	8004f4e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	3338      	adds	r3, #56	@ 0x38
 8004cd0:	3311      	adds	r3, #17
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe f844 	bl	8002d60 <ld_word>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	891b      	ldrh	r3, [r3, #8]
 8004ce4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ce6:	8992      	ldrh	r2, [r2, #12]
 8004ce8:	0952      	lsrs	r2, r2, #5
 8004cea:	b292      	uxth	r2, r2
 8004cec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cf0:	fb01 f202 	mul.w	r2, r1, r2
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <find_volume+0x2a8>
 8004cfc:	230d      	movs	r3, #13
 8004cfe:	e126      	b.n	8004f4e <find_volume+0x4f2>
 8004d00:	2000211c 	.word	0x2000211c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d06:	3338      	adds	r3, #56	@ 0x38
 8004d08:	3313      	adds	r3, #19
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe f828 	bl	8002d60 <ld_word>
 8004d10:	4603      	mov	r3, r0
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <find_volume+0x2cc>
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	3338      	adds	r3, #56	@ 0x38
 8004d1e:	3320      	adds	r3, #32
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe f836 	bl	8002d92 <ld_dword>
 8004d26:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	3338      	adds	r3, #56	@ 0x38
 8004d2c:	330e      	adds	r3, #14
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe f816 	bl	8002d60 <ld_word>
 8004d34:	4603      	mov	r3, r0
 8004d36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004d38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <find_volume+0x2e6>
 8004d3e:	230d      	movs	r3, #13
 8004d40:	e105      	b.n	8004f4e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004d42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d46:	4413      	add	r3, r2
 8004d48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d4a:	8911      	ldrh	r1, [r2, #8]
 8004d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d4e:	8992      	ldrh	r2, [r2, #12]
 8004d50:	0952      	lsrs	r2, r2, #5
 8004d52:	b292      	uxth	r2, r2
 8004d54:	fbb1 f2f2 	udiv	r2, r1, r2
 8004d58:	b292      	uxth	r2, r2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d201      	bcs.n	8004d6a <find_volume+0x30e>
 8004d66:	230d      	movs	r3, #13
 8004d68:	e0f1      	b.n	8004f4e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d72:	8952      	ldrh	r2, [r2, #10]
 8004d74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <find_volume+0x328>
 8004d80:	230d      	movs	r3, #13
 8004d82:	e0e4      	b.n	8004f4e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004d84:	2303      	movs	r3, #3
 8004d86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d802      	bhi.n	8004d9a <find_volume+0x33e>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d802      	bhi.n	8004daa <find_volume+0x34e>
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1c9a      	adds	r2, r3, #2
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004db6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004db8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dbc:	441a      	add	r2, r3
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004dc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	441a      	add	r2, r3
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8004dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d11e      	bne.n	8004e12 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd6:	3338      	adds	r3, #56	@ 0x38
 8004dd8:	332a      	adds	r3, #42	@ 0x2a
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd ffc0 	bl	8002d60 <ld_word>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <find_volume+0x38e>
 8004de6:	230d      	movs	r3, #13
 8004de8:	e0b1      	b.n	8004f4e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	891b      	ldrh	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <find_volume+0x39a>
 8004df2:	230d      	movs	r3, #13
 8004df4:	e0ab      	b.n	8004f4e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	3338      	adds	r3, #56	@ 0x38
 8004dfa:	332c      	adds	r3, #44	@ 0x2c
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fd ffc8 	bl	8002d92 <ld_dword>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e06:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e10:	e01f      	b.n	8004e52 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	891b      	ldrh	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <find_volume+0x3c2>
 8004e1a:	230d      	movs	r3, #13
 8004e1c:	e097      	b.n	8004f4e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e24:	441a      	add	r2, r3
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d103      	bne.n	8004e3a <find_volume+0x3de>
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	e00a      	b.n	8004e50 <find_volume+0x3f4>
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	085a      	lsrs	r2, r3, #1
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004e50:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	899b      	ldrh	r3, [r3, #12]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	440b      	add	r3, r1
 8004e60:	3b01      	subs	r3, #1
 8004e62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e64:	8989      	ldrh	r1, [r1, #12]
 8004e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d201      	bcs.n	8004e72 <find_volume+0x416>
 8004e6e:	230d      	movs	r3, #13
 8004e70:	e06d      	b.n	8004f4e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295
 8004e78:	619a      	str	r2, [r3, #24]
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	2280      	movs	r2, #128	@ 0x80
 8004e86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004e88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d149      	bne.n	8004f24 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	3338      	adds	r3, #56	@ 0x38
 8004e94:	3330      	adds	r3, #48	@ 0x30
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd ff62 	bl	8002d60 <ld_word>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d140      	bne.n	8004f24 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004eaa:	f7fe fa0b 	bl	80032c4 <move_window>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d137      	bne.n	8004f24 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebc:	3338      	adds	r3, #56	@ 0x38
 8004ebe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd ff4c 	bl	8002d60 <ld_word>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d127      	bne.n	8004f24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	3338      	adds	r3, #56	@ 0x38
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fd ff5a 	bl	8002d92 <ld_dword>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f58 <find_volume+0x4fc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d11e      	bne.n	8004f24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	3338      	adds	r3, #56	@ 0x38
 8004eea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd ff4f 	bl	8002d92 <ld_dword>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <find_volume+0x500>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d113      	bne.n	8004f24 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efe:	3338      	adds	r3, #56	@ 0x38
 8004f00:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fd ff44 	bl	8002d92 <ld_dword>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f12:	3338      	adds	r3, #56	@ 0x38
 8004f14:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fd ff3a 	bl	8002d92 <ld_dword>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004f2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <find_volume+0x504>)
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <find_volume+0x504>)
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <find_volume+0x504>)
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	4a08      	ldr	r2, [pc, #32]	@ (8004f64 <find_volume+0x508>)
 8004f44:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004f46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f48:	f7fe f954 	bl	80031f4 <clear_lock>
#endif
	return FR_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3758      	adds	r7, #88	@ 0x58
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	41615252 	.word	0x41615252
 8004f5c:	61417272 	.word	0x61417272
 8004f60:	20002120 	.word	0x20002120
 8004f64:	20002144 	.word	0x20002144

08004f68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004f72:	2309      	movs	r3, #9
 8004f74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <validate+0x4e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d018      	beq.n	8004fb6 <validate+0x4e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d013      	beq.n	8004fb6 <validate+0x4e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	889a      	ldrh	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	88db      	ldrh	r3, [r3, #6]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d10c      	bne.n	8004fb6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fe3c 	bl	8002c20 <disk_status>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <validate+0x4e>
			res = FR_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <validate+0x5a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	e000      	b.n	8004fc4 <validate+0x5c>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6013      	str	r3, [r2, #0]
	return res;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fc9c 	bl	8004928 <get_ldnumber>
 8004ff0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da01      	bge.n	8004ffc <f_mount+0x28>
 8004ff8:	230b      	movs	r3, #11
 8004ffa:	e02b      	b.n	8005054 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004ffc:	4a17      	ldr	r2, [pc, #92]	@ (800505c <f_mount+0x88>)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005004:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800500c:	69b8      	ldr	r0, [r7, #24]
 800500e:	f7fe f8f1 	bl	80031f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	490d      	ldr	r1, [pc, #52]	@ (800505c <f_mount+0x88>)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <f_mount+0x66>
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <f_mount+0x6a>
 800503a:	2300      	movs	r3, #0
 800503c:	e00a      	b.n	8005054 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800503e:	f107 010c 	add.w	r1, r7, #12
 8005042:	f107 0308 	add.w	r3, r7, #8
 8005046:	2200      	movs	r2, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fd07 	bl	8004a5c <find_volume>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005052:	7dfb      	ldrb	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000211c 	.word	0x2000211c

08005060 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b09a      	sub	sp, #104	@ 0x68
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <f_open+0x18>
 8005074:	2309      	movs	r3, #9
 8005076:	e1b7      	b.n	80053e8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800507e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005080:	79fa      	ldrb	r2, [r7, #7]
 8005082:	f107 0114 	add.w	r1, r7, #20
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fce6 	bl	8004a5c <find_volume>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8005096:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 819b 	bne.w	80053d6 <f_open+0x376>
		dj.obj.fs = fs;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	f107 0318 	add.w	r3, r7, #24
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fbc5 	bl	800483c <follow_path>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80050b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d118      	bne.n	80050f2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80050c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	da03      	bge.n	80050d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80050ca:	2306      	movs	r3, #6
 80050cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80050d0:	e00f      	b.n	80050f2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf8c      	ite	hi
 80050d8:	2301      	movhi	r3, #1
 80050da:	2300      	movls	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	f107 0318 	add.w	r3, r7, #24
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd ff3c 	bl	8002f64 <chk_lock>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	f003 031c 	and.w	r3, r3, #28
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d07f      	beq.n	80051fc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80050fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005100:	2b00      	cmp	r3, #0
 8005102:	d017      	beq.n	8005134 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005104:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005108:	2b04      	cmp	r3, #4
 800510a:	d10e      	bne.n	800512a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800510c:	f7fd ff86 	bl	800301c <enq_lock>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <f_open+0xc4>
 8005116:	f107 0318 	add.w	r3, r7, #24
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f8de 	bl	80042dc <dir_register>
 8005120:	4603      	mov	r3, r0
 8005122:	e000      	b.n	8005126 <f_open+0xc6>
 8005124:	2312      	movs	r3, #18
 8005126:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	71fb      	strb	r3, [r7, #7]
 8005132:	e010      	b.n	8005156 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005134:	7fbb      	ldrb	r3, [r7, #30]
 8005136:	f003 0311 	and.w	r3, r3, #17
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <f_open+0xe6>
					res = FR_DENIED;
 800513e:	2307      	movs	r3, #7
 8005140:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005144:	e007      	b.n	8005156 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <f_open+0xf6>
 8005150:	2308      	movs	r3, #8
 8005152:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005156:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800515a:	2b00      	cmp	r3, #0
 800515c:	d168      	bne.n	8005230 <f_open+0x1d0>
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d063      	beq.n	8005230 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005168:	f7fd fcf8 	bl	8002b5c <get_fattime>
 800516c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	330e      	adds	r3, #14
 8005172:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd fe4a 	bl	8002e0e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	3316      	adds	r3, #22
 800517e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005180:	4618      	mov	r0, r3
 8005182:	f7fd fe44 	bl	8002e0e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	330b      	adds	r3, #11
 800518a:	2220      	movs	r2, #32
 800518c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe fe1a 	bl	8003dce <ld_clust>
 800519a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051a0:	2200      	movs	r2, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fe32 	bl	8003e0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	331c      	adds	r3, #28
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fe2d 	bl	8002e0e <st_dword>
					fs->wflag = 1;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2201      	movs	r2, #1
 80051b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80051ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d037      	beq.n	8005230 <f_open+0x1d0>
						dw = fs->winsect;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80051c6:	f107 0318 	add.w	r3, r7, #24
 80051ca:	2200      	movs	r2, #0
 80051cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fb22 	bl	8003818 <remove_chain>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80051da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d126      	bne.n	8005230 <f_open+0x1d0>
							res = move_window(fs, dw);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe f86c 	bl	80032c4 <move_window>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051f6:	3a01      	subs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
 80051fa:	e019      	b.n	8005230 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80051fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005200:	2b00      	cmp	r3, #0
 8005202:	d115      	bne.n	8005230 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005204:	7fbb      	ldrb	r3, [r7, #30]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <f_open+0x1b6>
					res = FR_NO_FILE;
 800520e:	2304      	movs	r3, #4
 8005210:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005214:	e00c      	b.n	8005230 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <f_open+0x1d0>
 8005220:	7fbb      	ldrb	r3, [r7, #30]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <f_open+0x1d0>
						res = FR_DENIED;
 800522a:	2307      	movs	r3, #7
 800522c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005230:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005234:	2b00      	cmp	r3, #0
 8005236:	d126      	bne.n	8005286 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005248:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b01      	cmp	r3, #1
 800525c:	bf8c      	ite	hi
 800525e:	2301      	movhi	r3, #1
 8005260:	2300      	movls	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	f107 0318 	add.w	r3, r7, #24
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd fef7 	bl	8003060 <inc_lock>
 8005272:	4602      	mov	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <f_open+0x226>
 8005280:	2302      	movs	r3, #2
 8005282:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005286:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 80a3 	bne.w	80053d6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fd99 	bl	8003dce <ld_clust>
 800529c:	4602      	mov	r2, r0
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a4:	331c      	adds	r3, #28
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fd73 	bl	8002d92 <ld_dword>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	88da      	ldrh	r2, [r3, #6]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	79fa      	ldrb	r2, [r7, #7]
 80052ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3330      	adds	r3, #48	@ 0x30
 80052e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fd fddd 	bl	8002ea8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d06e      	beq.n	80053d6 <f_open+0x376>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d06a      	beq.n	80053d6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	895b      	ldrh	r3, [r3, #10]
 800530c:	461a      	mov	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	899b      	ldrh	r3, [r3, #12]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005324:	e016      	b.n	8005354 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe f887 	bl	800343e <get_fat>
 8005330:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005334:	2b01      	cmp	r3, #1
 8005336:	d802      	bhi.n	800533e <f_open+0x2de>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800533e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d102      	bne.n	800534c <f_open+0x2ec>
 8005346:	2301      	movs	r3, #1
 8005348:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800534c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800534e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005354:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <f_open+0x304>
 800535c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800535e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005360:	429a      	cmp	r2, r3
 8005362:	d8e0      	bhi.n	8005326 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005368:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800536a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800536e:	2b00      	cmp	r3, #0
 8005370:	d131      	bne.n	80053d6 <f_open+0x376>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	899b      	ldrh	r3, [r3, #12]
 8005376:	461a      	mov	r2, r3
 8005378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800537a:	fbb3 f1f2 	udiv	r1, r3, r2
 800537e:	fb01 f202 	mul.w	r2, r1, r2
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d026      	beq.n	80053d6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe f837 	bl	8003400 <clust2sect>
 8005392:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8005394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <f_open+0x342>
						res = FR_INT_ERR;
 800539a:	2302      	movs	r3, #2
 800539c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80053a0:	e019      	b.n	80053d6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	899b      	ldrh	r3, [r3, #12]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80053ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	7858      	ldrb	r0, [r3, #1]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a1a      	ldr	r2, [r3, #32]
 80053c4:	2301      	movs	r3, #1
 80053c6:	f7fd fc6d 	bl	8002ca4 <disk_read>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <f_open+0x376>
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80053d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <f_open+0x384>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80053e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3768      	adds	r7, #104	@ 0x68
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08c      	sub	sp, #48	@ 0x30
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f107 0210 	add.w	r2, r7, #16
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fda9 	bl	8004f68 <validate>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800541c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <f_write+0x44>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	7d5b      	ldrb	r3, [r3, #21]
 8005428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800542c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <f_write+0x4a>
 8005434:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005438:	e16a      	b.n	8005710 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	7d1b      	ldrb	r3, [r3, #20]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <f_write+0x5a>
 8005446:	2307      	movs	r3, #7
 8005448:	e162      	b.n	8005710 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	441a      	add	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	429a      	cmp	r2, r3
 8005458:	f080 814c 	bcs.w	80056f4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	43db      	mvns	r3, r3
 8005462:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005464:	e146      	b.n	80056f4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	8992      	ldrh	r2, [r2, #12]
 800546e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005472:	fb01 f202 	mul.w	r2, r1, r2
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	f040 80f1 	bne.w	8005660 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	8992      	ldrh	r2, [r2, #12]
 8005486:	fbb3 f3f2 	udiv	r3, r3, r2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	8952      	ldrh	r2, [r2, #10]
 800548e:	3a01      	subs	r2, #1
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d143      	bne.n	8005522 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11a      	bne.n	80054e4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fa15 	bl	80038e2 <create_chain>
 80054b8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80054ba:	e013      	b.n	80054e4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	4619      	mov	r1, r3
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7fe faa1 	bl	8003a12 <clmt_clust>
 80054d0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80054d2:	e007      	b.n	80054e4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7fe fa00 	bl	80038e2 <create_chain>
 80054e2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8109 	beq.w	80056fe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80054ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d104      	bne.n	80054fc <f_write+0x10c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2202      	movs	r2, #2
 80054f6:	755a      	strb	r2, [r3, #21]
 80054f8:	2302      	movs	r3, #2
 80054fa:	e109      	b.n	8005710 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005502:	d104      	bne.n	800550e <f_write+0x11e>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	755a      	strb	r2, [r3, #21]
 800550a:	2301      	movs	r3, #1
 800550c:	e100      	b.n	8005710 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005512:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <f_write+0x132>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005520:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	7d1b      	ldrb	r3, [r3, #20]
 8005526:	b25b      	sxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	da18      	bge.n	800555e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	7858      	ldrb	r0, [r3, #1]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	2301      	movs	r3, #1
 800553c:	f7fd fbd2 	bl	8002ce4 <disk_write>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <f_write+0x160>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	755a      	strb	r2, [r3, #21]
 800554c:	2301      	movs	r3, #1
 800554e:	e0df      	b.n	8005710 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	7d1b      	ldrb	r3, [r3, #20]
 8005554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fd ff4a 	bl	8003400 <clust2sect>
 800556c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <f_write+0x18e>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2202      	movs	r2, #2
 8005578:	755a      	strb	r2, [r3, #21]
 800557a:	2302      	movs	r3, #2
 800557c:	e0c8      	b.n	8005710 <f_write+0x320>
			sect += csect;
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	4413      	add	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	899b      	ldrh	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005592:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d043      	beq.n	8005622 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	4413      	add	r3, r2
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	8952      	ldrh	r2, [r2, #10]
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d905      	bls.n	80055b4 <f_write+0x1c4>
					cc = fs->csize - csect;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	895b      	ldrh	r3, [r3, #10]
 80055ac:	461a      	mov	r2, r3
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	7858      	ldrb	r0, [r3, #1]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	f7fd fb91 	bl	8002ce4 <disk_write>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <f_write+0x1e2>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	755a      	strb	r2, [r3, #21]
 80055ce:	2301      	movs	r3, #1
 80055d0:	e09e      	b.n	8005710 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1a      	ldr	r2, [r3, #32]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d918      	bls.n	8005612 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	8992      	ldrh	r2, [r2, #12]
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	18d1      	adds	r1, r2, r3
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	899b      	ldrh	r3, [r3, #12]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fd fc31 	bl	8002e66 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	7d1b      	ldrb	r3, [r3, #20]
 8005608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	899b      	ldrh	r3, [r3, #12]
 8005616:	461a      	mov	r2, r3
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005620:	e04b      	b.n	80056ba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	429a      	cmp	r2, r3
 800562a:	d016      	beq.n	800565a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005634:	429a      	cmp	r2, r3
 8005636:	d210      	bcs.n	800565a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	7858      	ldrb	r0, [r3, #1]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005642:	2301      	movs	r3, #1
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	f7fd fb2d 	bl	8002ca4 <disk_read>
 800564a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	755a      	strb	r2, [r3, #21]
 8005656:	2301      	movs	r3, #1
 8005658:	e05a      	b.n	8005710 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	899b      	ldrh	r3, [r3, #12]
 8005664:	4618      	mov	r0, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	8992      	ldrh	r2, [r2, #12]
 800566e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005672:	fb01 f202 	mul.w	r2, r1, r2
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	1ac3      	subs	r3, r0, r3
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800567c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d901      	bls.n	8005688 <f_write+0x298>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	8992      	ldrh	r2, [r2, #12]
 8005696:	fbb3 f0f2 	udiv	r0, r3, r2
 800569a:	fb00 f202 	mul.w	r2, r0, r2
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	440b      	add	r3, r1
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	69f9      	ldr	r1, [r7, #28]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fbdd 	bl	8002e66 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	7d1b      	ldrb	r3, [r3, #20]
 80056b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	4413      	add	r3, r2
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	619a      	str	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	bf38      	it	cc
 80056da:	461a      	movcc	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	441a      	add	r2, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f47f aeb5 	bne.w	8005466 <f_write+0x76>
 80056fc:	e000      	b.n	8005700 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80056fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	7d1b      	ldrb	r3, [r3, #20]
 8005704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3730      	adds	r7, #48	@ 0x30
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f107 0208 	add.w	r2, r7, #8
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fc1d 	bl	8004f68 <validate>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d168      	bne.n	800580a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7d1b      	ldrb	r3, [r3, #20]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d062      	beq.n	800580a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7d1b      	ldrb	r3, [r3, #20]
 8005748:	b25b      	sxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	da15      	bge.n	800577a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	7858      	ldrb	r0, [r3, #1]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	2301      	movs	r3, #1
 800575e:	f7fd fac1 	bl	8002ce4 <disk_write>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <f_sync+0x54>
 8005768:	2301      	movs	r3, #1
 800576a:	e04f      	b.n	800580c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	7d1b      	ldrb	r3, [r3, #20]
 8005770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005774:	b2da      	uxtb	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800577a:	f7fd f9ef 	bl	8002b5c <get_fattime>
 800577e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fd fd9b 	bl	80032c4 <move_window>
 800578e:	4603      	mov	r3, r0
 8005790:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d138      	bne.n	800580a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	330b      	adds	r3, #11
 80057a2:	781a      	ldrb	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	330b      	adds	r3, #11
 80057a8:	f042 0220 	orr.w	r2, r2, #32
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	461a      	mov	r2, r3
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	f7fe fb26 	bl	8003e0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f103 021c 	add.w	r2, r3, #28
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f7fd fb1e 	bl	8002e0e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3316      	adds	r3, #22
 80057d6:	6939      	ldr	r1, [r7, #16]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fd fb18 	bl	8002e0e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3312      	adds	r3, #18
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd faf7 	bl	8002dd8 <st_word>
					fs->wflag = 1;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2201      	movs	r2, #1
 80057ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fd fd94 	bl	8003320 <sync_fs>
 80057f8:	4603      	mov	r3, r0
 80057fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7d1b      	ldrb	r3, [r3, #20]
 8005800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005804:	b2da      	uxtb	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff7b 	bl	8005718 <f_sync>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d118      	bne.n	800585e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f107 0208 	add.w	r2, r7, #8
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fb97 	bl	8004f68 <validate>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10c      	bne.n	800585e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fd fc97 	bl	800317c <dec_lock>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	@ 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f107 0208 	add.w	r2, r7, #8
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fb74 	bl	8004f68 <validate>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <f_lseek+0x2e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	7d5b      	ldrb	r3, [r3, #21]
 8005892:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005896:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <f_lseek+0x3c>
 800589e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80058a2:	e201      	b.n	8005ca8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80d9 	beq.w	8005a60 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d15a      	bne.n	800596c <f_lseek+0x104>
			tbl = fp->cltbl;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	2302      	movs	r3, #2
 80058c8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d03a      	beq.n	800594c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	2300      	movs	r3, #0
 80058dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	3302      	adds	r3, #2
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	3301      	adds	r3, #1
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd fda3 	bl	800343e <get_fat>
 80058f8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d804      	bhi.n	800590a <f_lseek+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	755a      	strb	r2, [r3, #21]
 8005906:	2302      	movs	r3, #2
 8005908:	e1ce      	b.n	8005ca8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d104      	bne.n	800591c <f_lseek+0xb4>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	755a      	strb	r2, [r3, #21]
 8005918:	2301      	movs	r3, #1
 800591a:	e1c5      	b.n	8005ca8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005922:	429a      	cmp	r2, r3
 8005924:	d0de      	beq.n	80058e4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	429a      	cmp	r2, r3
 800592c:	d809      	bhi.n	8005942 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	1d1a      	adds	r2, r3, #4
 8005932:	627a      	str	r2, [r7, #36]	@ 0x24
 8005934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	627a      	str	r2, [r7, #36]	@ 0x24
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005948:	429a      	cmp	r2, r3
 800594a:	d3c4      	bcc.n	80058d6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005952:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8005954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	429a      	cmp	r2, r3
 800595a:	d803      	bhi.n	8005964 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e19f      	b.n	8005ca4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005964:	2311      	movs	r3, #17
 8005966:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800596a:	e19b      	b.n	8005ca4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d902      	bls.n	800597c <f_lseek+0x114>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 818d 	beq.w	8005ca4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	3b01      	subs	r3, #1
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fe f83e 	bl	8003a12 <clmt_clust>
 8005996:	4602      	mov	r2, r0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fd fd2b 	bl	8003400 <clust2sect>
 80059aa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <f_lseek+0x154>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	755a      	strb	r2, [r3, #21]
 80059b8:	2302      	movs	r3, #2
 80059ba:	e175      	b.n	8005ca8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3b01      	subs	r3, #1
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	8992      	ldrh	r2, [r2, #12]
 80059c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	8952      	ldrh	r2, [r2, #10]
 80059cc:	3a01      	subs	r2, #1
 80059ce:	4013      	ands	r3, r2
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4413      	add	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	8992      	ldrh	r2, [r2, #12]
 80059de:	fbb3 f1f2 	udiv	r1, r3, r2
 80059e2:	fb01 f202 	mul.w	r2, r1, r2
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 815b 	beq.w	8005ca4 <f_lseek+0x43c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f000 8155 	beq.w	8005ca4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	7d1b      	ldrb	r3, [r3, #20]
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da18      	bge.n	8005a36 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	7858      	ldrb	r0, [r3, #1]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	2301      	movs	r3, #1
 8005a14:	f7fd f966 	bl	8002ce4 <disk_write>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <f_lseek+0x1c0>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	755a      	strb	r2, [r3, #21]
 8005a24:	2301      	movs	r3, #1
 8005a26:	e13f      	b.n	8005ca8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7d1b      	ldrb	r3, [r3, #20]
 8005a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	7858      	ldrb	r0, [r3, #1]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005a40:	2301      	movs	r3, #1
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	f7fd f92e 	bl	8002ca4 <disk_read>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <f_lseek+0x1f0>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	755a      	strb	r2, [r3, #21]
 8005a54:	2301      	movs	r3, #1
 8005a56:	e127      	b.n	8005ca8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	621a      	str	r2, [r3, #32]
 8005a5e:	e121      	b.n	8005ca4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d908      	bls.n	8005a7c <f_lseek+0x214>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7d1b      	ldrb	r3, [r3, #20]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a8a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80b5 	beq.w	8005bfe <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	895b      	ldrh	r3, [r3, #10]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	899b      	ldrh	r3, [r3, #12]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01b      	beq.n	8005ae2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	1e5a      	subs	r2, r3, #1
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	1e59      	subs	r1, r3, #1
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d30f      	bcc.n	8005ae2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	1e5a      	subs	r2, r3, #1
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	425b      	negs	r3, r3
 8005aca:	401a      	ands	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae0:	e022      	b.n	8005b28 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d119      	bne.n	8005b22 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fd fef5 	bl	80038e2 <create_chain>
 8005af8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d104      	bne.n	8005b0a <f_lseek+0x2a2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	755a      	strb	r2, [r3, #21]
 8005b06:	2302      	movs	r3, #2
 8005b08:	e0ce      	b.n	8005ca8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d104      	bne.n	8005b1c <f_lseek+0x2b4>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	755a      	strb	r2, [r3, #21]
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0c5      	b.n	8005ca8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b20:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b26:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d067      	beq.n	8005bfe <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8005b2e:	e03a      	b.n	8005ba6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699a      	ldr	r2, [r3, #24]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	441a      	add	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	7d1b      	ldrb	r3, [r3, #20]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fec4 	bl	80038e2 <create_chain>
 8005b5a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d108      	bne.n	8005b74 <f_lseek+0x30c>
							ofs = 0; break;
 8005b62:	2300      	movs	r3, #0
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	e022      	b.n	8005bae <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fd fc66 	bl	800343e <get_fat>
 8005b72:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d104      	bne.n	8005b86 <f_lseek+0x31e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	755a      	strb	r2, [r3, #21]
 8005b82:	2301      	movs	r3, #1
 8005b84:	e090      	b.n	8005ca8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d904      	bls.n	8005b96 <f_lseek+0x32e>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d304      	bcc.n	8005ba0 <f_lseek+0x338>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	755a      	strb	r2, [r3, #21]
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e083      	b.n	8005ca8 <f_lseek+0x440>
					fp->clust = clst;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ba4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d8c0      	bhi.n	8005b30 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	899b      	ldrh	r3, [r3, #12]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bc6:	fb01 f202 	mul.w	r2, r1, r2
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd fc13 	bl	8003400 <clust2sect>
 8005bda:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <f_lseek+0x384>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	755a      	strb	r2, [r3, #21]
 8005be8:	2302      	movs	r3, #2
 8005bea:	e05d      	b.n	8005ca8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	899b      	ldrh	r3, [r3, #12]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bfa:	4413      	add	r3, r2
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d90a      	bls.n	8005c20 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7d1b      	ldrb	r3, [r3, #20]
 8005c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	8992      	ldrh	r2, [r2, #12]
 8005c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c2c:	fb01 f202 	mul.w	r2, r1, r2
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d036      	beq.n	8005ca4 <f_lseek+0x43c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d031      	beq.n	8005ca4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7d1b      	ldrb	r3, [r3, #20]
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da18      	bge.n	8005c7c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	7858      	ldrb	r0, [r3, #1]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f7fd f843 	bl	8002ce4 <disk_write>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <f_lseek+0x406>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	755a      	strb	r2, [r3, #21]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e01c      	b.n	8005ca8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7d1b      	ldrb	r3, [r3, #20]
 8005c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	7858      	ldrb	r0, [r3, #1]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c86:	2301      	movs	r3, #1
 8005c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c8a:	f7fd f80b 	bl	8002ca4 <disk_read>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <f_lseek+0x436>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	755a      	strb	r2, [r3, #21]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e004      	b.n	8005ca8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ca2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8005ca4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3740      	adds	r7, #64	@ 0x40
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b0a      	cmp	r3, #10
 8005cc0:	d103      	bne.n	8005cca <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005cc2:	210d      	movs	r1, #13
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fff3 	bl	8005cb0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	db25      	blt.n	8005d22 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	60fa      	str	r2, [r7, #12]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	4413      	add	r3, r2
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b3c      	cmp	r3, #60	@ 0x3c
 8005ce8:	dd12      	ble.n	8005d10 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f103 010c 	add.w	r1, r3, #12
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	f7ff fb79 	bl	80053f0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d101      	bne.n	8005d0a <putc_bfd+0x5a>
 8005d06:	2300      	movs	r3, #0
 8005d08:	e001      	b.n	8005d0e <putc_bfd+0x5e>
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	e000      	b.n	8005d24 <putc_bfd+0x74>
	if (i < 0) return;
 8005d22:	bf00      	nop
}
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	db16      	blt.n	8005d68 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f103 010c 	add.w	r1, r3, #12
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f107 030c 	add.w	r3, r7, #12
 8005d4e:	f7ff fb4f 	bl	80053f0 <f_write>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d102      	bne.n	8005d68 <putc_flush+0x3e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	e001      	b.n	8005d6c <putc_flush+0x42>
	return EOF;
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b096      	sub	sp, #88	@ 0x58
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff ffe0 	bl	8005d74 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005db4:	e009      	b.n	8005dca <f_puts+0x2c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	f107 030c 	add.w	r3, r7, #12
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ff73 	bl	8005cb0 <putc_bfd>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f1      	bne.n	8005db6 <f_puts+0x18>
	return putc_flush(&pb);
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ffa7 	bl	8005d2a <putc_flush>
 8005ddc:	4603      	mov	r3, r0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3758      	adds	r7, #88	@ 0x58
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e00:	7a5b      	ldrb	r3, [r3, #9]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d131      	bne.n	8005e6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e08:	4b1c      	ldr	r3, [pc, #112]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e0a:	7a5b      	ldrb	r3, [r3, #9]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4b1a      	ldr	r3, [pc, #104]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e12:	2100      	movs	r1, #0
 8005e14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e16:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e18:	7a5b      	ldrb	r3, [r3, #9]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e26:	4b15      	ldr	r3, [pc, #84]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e28:	7a5b      	ldrb	r3, [r3, #9]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e30:	4413      	add	r3, r2
 8005e32:	79fa      	ldrb	r2, [r7, #7]
 8005e34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e36:	4b11      	ldr	r3, [pc, #68]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e38:	7a5b      	ldrb	r3, [r3, #9]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	b2d1      	uxtb	r1, r2
 8005e40:	4a0e      	ldr	r2, [pc, #56]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e42:	7251      	strb	r1, [r2, #9]
 8005e44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e46:	7dbb      	ldrb	r3, [r7, #22]
 8005e48:	3330      	adds	r3, #48	@ 0x30
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	223a      	movs	r2, #58	@ 0x3a
 8005e56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	222f      	movs	r2, #47	@ 0x2f
 8005e5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3303      	adds	r3, #3
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20002344 	.word	0x20002344

08005e80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff ffaa 	bl	8005de8 <FATFS_LinkDriverEx>
 8005e94:	4603      	mov	r3, r0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	6039      	str	r1, [r7, #0]
 8005eaa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eb0:	d802      	bhi.n	8005eb8 <ff_convert+0x18>
		c = chr;
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	81fb      	strh	r3, [r7, #14]
 8005eb6:	e025      	b.n	8005f04 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	2bff      	cmp	r3, #255	@ 0xff
 8005ec2:	d805      	bhi.n	8005ed0 <ff_convert+0x30>
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	3b80      	subs	r3, #128	@ 0x80
 8005ec8:	4a12      	ldr	r2, [pc, #72]	@ (8005f14 <ff_convert+0x74>)
 8005eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ece:	e000      	b.n	8005ed2 <ff_convert+0x32>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	81fb      	strh	r3, [r7, #14]
 8005ed4:	e016      	b.n	8005f04 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	81fb      	strh	r3, [r7, #14]
 8005eda:	e009      	b.n	8005ef0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005edc:	89fb      	ldrh	r3, [r7, #14]
 8005ede:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <ff_convert+0x74>)
 8005ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d006      	beq.n	8005ef8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005eea:	89fb      	ldrh	r3, [r7, #14]
 8005eec:	3301      	adds	r3, #1
 8005eee:	81fb      	strh	r3, [r7, #14]
 8005ef0:	89fb      	ldrh	r3, [r7, #14]
 8005ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ef4:	d9f2      	bls.n	8005edc <ff_convert+0x3c>
 8005ef6:	e000      	b.n	8005efa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005ef8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005efa:	89fb      	ldrh	r3, [r7, #14]
 8005efc:	3380      	adds	r3, #128	@ 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005f04:	89fb      	ldrh	r3, [r7, #14]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	080061a4 	.word	0x080061a4

08005f18 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f28:	d201      	bcs.n	8005f2e <ff_wtoupper+0x16>
 8005f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006024 <ff_wtoupper+0x10c>)
 8005f2c:	e000      	b.n	8005f30 <ff_wtoupper+0x18>
 8005f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006028 <ff_wtoupper+0x110>)
 8005f30:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1c9a      	adds	r2, r3, #2
 8005f36:	617a      	str	r2, [r7, #20]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8005f3c:	8a7b      	ldrh	r3, [r7, #18]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d068      	beq.n	8006014 <ff_wtoupper+0xfc>
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	8a7b      	ldrh	r3, [r7, #18]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d364      	bcc.n	8006014 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	1c9a      	adds	r2, r3, #2
 8005f4e:	617a      	str	r2, [r7, #20]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	823b      	strh	r3, [r7, #16]
 8005f54:	8a3b      	ldrh	r3, [r7, #16]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	81fb      	strh	r3, [r7, #14]
 8005f5a:	8a3b      	ldrh	r3, [r7, #16]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	8a79      	ldrh	r1, [r7, #18]
 8005f64:	8a3b      	ldrh	r3, [r7, #16]
 8005f66:	440b      	add	r3, r1
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	da49      	bge.n	8006000 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d84f      	bhi.n	8006012 <ff_wtoupper+0xfa>
 8005f72:	a201      	add	r2, pc, #4	@ (adr r2, 8005f78 <ff_wtoupper+0x60>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005faf 	.word	0x08005faf
 8005f80:	08005fc5 	.word	0x08005fc5
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fd5 	.word	0x08005fd5
 8005f8c:	08005fdd 	.word	0x08005fdd
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08005ff5 	.word	0x08005ff5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005f9c:	88fa      	ldrh	r2, [r7, #6]
 8005f9e:	8a7b      	ldrh	r3, [r7, #18]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	80fb      	strh	r3, [r7, #6]
 8005fac:	e027      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	8a7b      	ldrh	r3, [r7, #18]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	80fb      	strh	r3, [r7, #6]
 8005fc2:	e01c      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	3b10      	subs	r3, #16
 8005fc8:	80fb      	strh	r3, [r7, #6]
 8005fca:	e018      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	3b20      	subs	r3, #32
 8005fd0:	80fb      	strh	r3, [r7, #6]
 8005fd2:	e014      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	3b30      	subs	r3, #48	@ 0x30
 8005fd8:	80fb      	strh	r3, [r7, #6]
 8005fda:	e010      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	3b1a      	subs	r3, #26
 8005fe0:	80fb      	strh	r3, [r7, #6]
 8005fe2:	e00c      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	80fb      	strh	r3, [r7, #6]
 8005fea:	e008      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005fec:	88fb      	ldrh	r3, [r7, #6]
 8005fee:	3b50      	subs	r3, #80	@ 0x50
 8005ff0:	80fb      	strh	r3, [r7, #6]
 8005ff2:	e004      	b.n	8005ffe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8005ffa:	80fb      	strh	r3, [r7, #6]
 8005ffc:	bf00      	nop
			}
			break;
 8005ffe:	e008      	b.n	8006012 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d195      	bne.n	8005f32 <ff_wtoupper+0x1a>
 8006006:	8a3b      	ldrh	r3, [r7, #16]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006010:	e78f      	b.n	8005f32 <ff_wtoupper+0x1a>
			break;
 8006012:	bf00      	nop
	}

	return chr;
 8006014:	88fb      	ldrh	r3, [r7, #6]
}
 8006016:	4618      	mov	r0, r3
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	080062a4 	.word	0x080062a4
 8006028:	08006498 	.word	0x08006498

0800602c <memset>:
 800602c:	4402      	add	r2, r0
 800602e:	4603      	mov	r3, r0
 8006030:	4293      	cmp	r3, r2
 8006032:	d100      	bne.n	8006036 <memset+0xa>
 8006034:	4770      	bx	lr
 8006036:	f803 1b01 	strb.w	r1, [r3], #1
 800603a:	e7f9      	b.n	8006030 <memset+0x4>

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	@ (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	@ (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	@ (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	@ (8006080 <__libc_init_array+0x44>)
 8006050:	f000 f818 	bl	8006084 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	0800655c 	.word	0x0800655c
 8006078:	0800655c 	.word	0x0800655c
 800607c:	0800655c 	.word	0x0800655c
 8006080:	08006560 	.word	0x08006560

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
